// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Database\AppDbContext.cs
// ==================================================

using Microsoft.EntityFrameworkCore;
using Monte_Karlo.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.DataBase
{
    public class AppDbContext : DbContext
    {
        public DbSet<CircleParams> CircleParams { get; set; }
        public DbSet<SimulationResult> SimulationResults { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string databasePath = "DataBase.db";
            optionsBuilder.UseSqlite($"Data Source={databasePath}");
            //optionsBuilder.LogTo(message => System.Diagnostics.Debug.WriteLine(message));

        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CircleParams>()
                .HasIndex(cp => new 
                { 
                    cp.CenterX, 
                    cp.CenterY, 
                    cp.Radius, 
                    cp.Direction, 
                    cp.C, 
                    cp.TotalPoints 
                })
                .IsUnique();
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Database\DatabaseHelper.cs
// ==================================================

using Microsoft.EntityFrameworkCore;
using Monte_Karlo.Models;
using Monte_Karlo.Utilites;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.DataBase
{
    public class DatabaseHelper
    {
        private Logger logger;
        public DatabaseHelper()
        {
            logger = new Logger();
            InitializeDatabase();
        }

        public void InitializeDatabase()
        {
            using var context = new AppDbContext();
            if (context.Database.CanConnect())
                return;
            context.Database.EnsureCreated();
            logger.Log("Создание базы данных");
        }

        public void ClearDatabase()
        {
            using (var context = new AppDbContext())
            {
                context.Database.EnsureDeleted();
                context.Database.EnsureCreated();
            }
            logger.Log("Очистка базы данных");
        }

        public void SaveResults(Circle circle, int totalPoints,
            int pointsInCircle, int pointsInSegment, double analyticalResult, double monteCarloResult)
        {
            using var context = new AppDbContext();

            var circleParams = context.CircleParams
                .Include(cp => cp.Results)
                .FirstOrDefault(cp =>
                    cp.CenterX == circle.circleCenter.X &&
                    cp.CenterY == circle.circleCenter.Y &&
                    cp.Radius == circle.radius &&
                    cp.Direction == circle.direction &&
                    cp.C == circle.C &&
                    cp.TotalPoints == totalPoints);

            if (circleParams == null)
            {
                circleParams = new CircleParams
                {
                    CenterX = circle.circleCenter.X,
                    CenterY = circle.circleCenter.Y,
                    Radius = circle.radius,
                    Direction = circle.direction,
                    C = circle.C,
                    TotalPoints = totalPoints,
                    AnalyticalResult = analyticalResult
                };
                context.CircleParams.Add(circleParams);
            }

            var result = new SimulationResult
            {
                CircleParams = circleParams,
                PointsInCircle = pointsInCircle,
                PointsInSegment = pointsInSegment,
                MonteCarloResult = monteCarloResult
            };

            context.SimulationResults.Add(result);
            context.SaveChanges();
            logger.Log($"Сохранение:\n{circleParams}\n{result}");
        }

        public CircleParams GetData(Circle circle, int totalPoints)
        {
            using var context = new AppDbContext();
            var query = context.CircleParams
                .Include(cp => cp.Results)
                .Where(cp =>
                    cp.CenterX == circle.circleCenter.X &&
                    cp.CenterY == circle.circleCenter.Y &&
                    cp.Radius == circle.radius &&
                    cp.Direction == circle.direction &&
                    cp.C == circle.C &&
                    cp.TotalPoints == totalPoints);
            return query.FirstOrDefault();
        }

        public CircleParams GetDataById(int selectedId)
        {
            using var context = new AppDbContext();
            var result = context.CircleParams
                .Include(cp => cp.Results)
                .FirstOrDefault(cp => cp.Id == selectedId);
            return result;
        }

        public List<CircleParams> GetAllData()
        {
            using var context = new AppDbContext();
            var results = context.CircleParams
                    .Include(cp => cp.Results)
                    .ToList();
            return results;
        }

        public void RemoveCircleParamsById(int selectedId)
        {
            using var context = new AppDbContext();
            var experiment = context.CircleParams
                .Include(cp => cp.Results)
                .FirstOrDefault(cp => cp.Id == selectedId);

            if (experiment != null)
            {
                context.CircleParams.Remove(experiment);
                context.SaveChanges();
            }
            logger.Log($"Удаление:\n{experiment}");
        }

        public string CreateBackup(string fileName) 
        {
            var currentDirectory = Directory.GetCurrentDirectory();
            var sourcePath = Path.Combine(currentDirectory, "DataBase.db");

            File.Copy(sourcePath, fileName, true);
            string message = $"Резервная копия создана: {Path.GetFileName(fileName)}";
            logger.Log(message);
            return Path.GetFileName(fileName);
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\AboutProgramForm.cs
// ==================================================

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Monte_Karlo
{
    public partial class AboutProgramForm : Form
    {
        public AboutProgramForm()
        {
            InitializeComponent();
            var version = Assembly.GetExecutingAssembly().GetName().Version;
            versionLabel.Text = $"Версия: {version.Major}.{version.Minor}.{version.Build}.{version.MinorRevision}";
        }

        private void closeButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void githubLinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            try
            {
                // Открываем ссылку в браузере по умолчанию
                System.Diagnostics.Process.Start("https://github.com/AndreiGudz");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Не удалось открыть ссылку: {ex.Message}",
                                "Ошибка",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
            }
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\AboutProgramForm.Designer.cs
// ==================================================

using System;
using System.Windows.Forms;

namespace Monte_Karlo
{
    partial class AboutProgramForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutProgramForm));
            tableLayoutPanel1 = new TableLayoutPanel();
            authorLabel = new Label();
            versionLabel = new Label();
            closeButton = new Button();
            titleLabel = new Label();
            pictureBox1 = new PictureBox();
            githubLinkLabel = new LinkLabel();
            tableLayoutPanel1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            SuspendLayout();
            // 
            // tableLayoutPanel1
            // 
            tableLayoutPanel1.AutoSize = true;
            tableLayoutPanel1.AutoSizeMode = AutoSizeMode.GrowAndShrink;
            tableLayoutPanel1.ColumnCount = 2;
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 450F));
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F));
            tableLayoutPanel1.Controls.Add(authorLabel, 0, 1);
            tableLayoutPanel1.Controls.Add(versionLabel, 0, 2);
            tableLayoutPanel1.Controls.Add(closeButton, 0, 5);
            tableLayoutPanel1.Controls.Add(titleLabel, 0, 0);
            tableLayoutPanel1.Controls.Add(pictureBox1, 1, 0);
            tableLayoutPanel1.Controls.Add(githubLinkLabel, 0, 3);
            tableLayoutPanel1.Dock = DockStyle.Fill;
            tableLayoutPanel1.Location = new Point(20, 20);
            tableLayoutPanel1.Name = "tableLayoutPanel1";
            tableLayoutPanel1.RightToLeft = RightToLeft.No;
            tableLayoutPanel1.RowCount = 6;
            tableLayoutPanel1.RowStyles.Add(new RowStyle());
            tableLayoutPanel1.RowStyles.Add(new RowStyle());
            tableLayoutPanel1.RowStyles.Add(new RowStyle());
            tableLayoutPanel1.RowStyles.Add(new RowStyle());
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 100F));
            tableLayoutPanel1.RowStyles.Add(new RowStyle());
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 20F));
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 20F));
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 20F));
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 20F));
            tableLayoutPanel1.Size = new Size(802, 428);
            tableLayoutPanel1.TabIndex = 0;
            // 
            // authorLabel
            // 
            authorLabel.AutoSize = true;
            authorLabel.Dock = DockStyle.Fill;
            authorLabel.Font = new Font("Segoe UI", 10F);
            authorLabel.Location = new Point(0, 100);
            authorLabel.Margin = new Padding(0, 0, 0, 5);
            authorLabel.Name = "authorLabel";
            authorLabel.Size = new Size(450, 160);
            authorLabel.TabIndex = 1;
            authorLabel.Text = "Автор: Гудзь Андрей Владимирович\r\nСтудент группы ИСП-304 Университетского колледжа информационных технологий им. Разумовского";
            // 
            // versionLabel
            // 
            versionLabel.AutoSize = true;
            versionLabel.Dock = DockStyle.Fill;
            versionLabel.Font = new Font("Segoe UI", 10F);
            versionLabel.Location = new Point(3, 265);
            versionLabel.Name = "versionLabel";
            versionLabel.Size = new Size(444, 32);
            versionLabel.TabIndex = 2;
            versionLabel.Text = "Версия: ";
            // 
            // closeButton
            // 
            closeButton.BackColor = SystemColors.ButtonFace;
            tableLayoutPanel1.SetColumnSpan(closeButton, 2);
            closeButton.DialogResult = DialogResult.OK;
            closeButton.Dock = DockStyle.Fill;
            closeButton.Location = new Point(3, 359);
            closeButton.Name = "closeButton";
            closeButton.Size = new Size(796, 66);
            closeButton.TabIndex = 4;
            closeButton.Text = "Закрыть";
            closeButton.UseVisualStyleBackColor = true;
            closeButton.Click += closeButton_Click;
            // 
            // titleLabel
            // 
            titleLabel.AutoSize = true;
            titleLabel.Dock = DockStyle.Fill;
            titleLabel.Font = new Font("Segoe UI", 14F, FontStyle.Bold);
            titleLabel.ForeColor = Color.DarkBlue;
            titleLabel.Location = new Point(0, 0);
            titleLabel.Margin = new Padding(0, 0, 0, 10);
            titleLabel.Name = "titleLabel";
            titleLabel.Size = new Size(450, 90);
            titleLabel.TabIndex = 0;
            titleLabel.Text = "Вычислитель площади сегмента окружности";
            titleLabel.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // pictureBox1
            // 
            pictureBox1.Dock = DockStyle.Fill;
            pictureBox1.Image = Properties.Resources.ChatGPT_Image_18_июн__2025_г___13_23_30;
            pictureBox1.Location = new Point(453, 3);
            pictureBox1.Name = "pictureBox1";
            tableLayoutPanel1.SetRowSpan(pictureBox1, 5);
            pictureBox1.Size = new Size(346, 350);
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox1.TabIndex = 5;
            pictureBox1.TabStop = false;
            // 
            // githubLinkLabel
            // 
            githubLinkLabel.AutoSize = true;
            githubLinkLabel.Dock = DockStyle.Fill;
            githubLinkLabel.Font = new Font("Segoe UI", 10F);
            githubLinkLabel.Location = new Point(3, 297);
            githubLinkLabel.Name = "githubLinkLabel";
            githubLinkLabel.Size = new Size(444, 32);
            githubLinkLabel.TabIndex = 6;
            githubLinkLabel.TabStop = true;
            githubLinkLabel.Text = "GitHub: https://github.com/AndreiGudz";
            githubLinkLabel.LinkClicked += githubLinkLabel_LinkClicked;
            // 
            // AboutProgramForm
            // 
            AutoScaleDimensions = new SizeF(12F, 30F);
            AutoScaleMode = AutoScaleMode.Font;
            BackColor = Color.White;
            ClientSize = new Size(842, 468);
            Controls.Add(tableLayoutPanel1);
            Font = new Font("Segoe UI", 9F);
            FormBorderStyle = FormBorderStyle.FixedDialog;
            Icon = (Icon)resources.GetObject("$this.Icon");
            Margin = new Padding(0, 0, 0, 15);
            MaximizeBox = false;
            MinimizeBox = false;
            Name = "AboutProgramForm";
            Padding = new Padding(20);
            StartPosition = FormStartPosition.CenterScreen;
            Text = "О программе";
            tableLayoutPanel1.ResumeLayout(false);
            tableLayoutPanel1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private TableLayoutPanel tableLayoutPanel1;
        private Label titleLabel;
        private Label authorLabel;
        private Label versionLabel;
        private Button closeButton;
        private PictureBox pictureBox1;
        private LinkLabel githubLinkLabel;
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\AnalysisForm.cs
// ==================================================

using Microsoft.EntityFrameworkCore;
using Monte_Karlo.DataBase;
using Monte_Karlo.Models;
using Monte_Karlo.Utilites;
using Monte_Karlo.Utilites.Calculators;
using Monte_Karlo.Utilites.View;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace Monte_Karlo
{
    public partial class AnalysisForm : Form
    {
        private List<SimulationResult> _results = new List<SimulationResult>();
        private CircleParams _currentParams;
        private AnalysisView _view;

        public AnalysisForm()
        {
            InitializeComponent();
            _view = new AnalysisView();
        }

        public AnalysisForm(CircleParams circleParams) : this()
        {
            if (circleParams is not null)
            {
                _currentParams = circleParams;
                _results = circleParams.Results;
            }
        }

        private void AnalysisForm_Load(object sender, EventArgs e)
        {
            SetupDataGridView();
            CalculateStatistics();
        }

        private void SetupDataGridView()
        {
            dataGridViewResults.Columns.Clear();
            AddColumn("Id", "№", "Id", true, "D2", null, DataGridViewAutoSizeColumnMode.DisplayedCells);
            AddColumn("PointsInCircle", "Точек в окружности", "PointsInCircle", true, "N0");
            AddColumn("PointsInSegment", "Точек в сегменте", "PointsInSegment", true, "N0");
            AddColumn("AnalyticalResult", "Аналитический резльтат", "AnalyticalResult", true, "F4",
                     _currentParams?.AnalyticalResult.ToString("F4") ?? "N/A");
            AddColumn("MonteCarloResult", "Результат Монте-Карло", "MonteCarloResult", true, "F4");
            AddColumn("AbsoluteError", "Абсолютная ошибка", "AbsoluteError", true, "F2");
            AddColumn("RelativeError", "Ошибка (%)", "RelativeError", true, "F2");

            if (_currentParams != null && _currentParams.Results.Any())
            {
                int id = 0;
                var displayResults = _currentParams.Results
                    .OrderByDescending(r => r.Id)
                    .Select(r => new
                    {
                        Id = ++id,
                        r.PointsInCircle,
                        r.PointsInSegment,
                        AnalyticalResult = _currentParams.AnalyticalResult,
                        r.MonteCarloResult,
                        AbsoluteError = Calculator.CalculateAbsoluteError(_currentParams.AnalyticalResult, r.MonteCarloResult).ToString(),
                        RelativeError = Calculator.CalculateRelativeError(_currentParams.AnalyticalResult, r.MonteCarloResult).ToString()
                    })
                    .ToList();

                var bindingSource = new BindingSource() { DataSource = displayResults };
                dataGridViewResults.DataSource = bindingSource;
            }
            else
            {
                dataGridViewResults.DataSource = null;
            }
        }

        // Настраиваем цветовое форматирование для колонки с ошибкой
        private void DataGridViewResults_CellFormatting(object? sender, DataGridViewCellFormattingEventArgs e)
        {
            {
                if (e.ColumnIndex == dataGridViewResults.Columns["RelativeError"].Index && e.Value != null)
                {
                    double error = Convert.ToDouble(e.Value);
                    e.CellStyle.ForeColor = error switch
                    {
                        > 10 => Color.Red,
                        > 5 => Color.Orange,
                        _ => Color.Green
                    };
                }
            };
        }

        private void AddColumn(string name, string header, string dataPropertyName, bool isReadOnly, string format,
                               object defaultValue = null, DataGridViewAutoSizeColumnMode AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells)
        {
            var col = new DataGridViewTextBoxColumn
            {
                Name = name,
                HeaderText = header,
                DataPropertyName = dataPropertyName,
                ReadOnly = isReadOnly,
                DefaultCellStyle = new DataGridViewCellStyle
                {
                    Format = format,
                    Alignment = DataGridViewContentAlignment.MiddleCenter,
                },
                SortMode = DataGridViewColumnSortMode.Programmatic,
                AutoSizeMode = AutoSizeMode
            };

            if (defaultValue != null)
            {
                col.DefaultCellStyle.NullValue = defaultValue;
            }

            dataGridViewResults.Columns.Add(col);
        }

        private void DataGridViewResults_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            DataGridViewColumn column = dataGridViewResults.Columns[e.ColumnIndex];

            // Определяем направление сортировки
            ListSortDirection direction = column.HeaderCell.SortGlyphDirection == SortOrder.Ascending ?
                ListSortDirection.Descending :
                ListSortDirection.Ascending;

            // Сортируем данные
            SortData(column.Name, direction);

            // Обновляем иконку сортировки
            dataGridViewResults.Columns.Cast<DataGridViewColumn>()
                .ToList()
                .ForEach(c => c.HeaderCell.SortGlyphDirection = SortOrder.None);

            dataGridViewResults.Columns[e.ColumnIndex].HeaderCell.SortGlyphDirection = direction == ListSortDirection.Ascending ?
                SortOrder.Ascending :
                SortOrder.Descending;
        }

        private void SortData(string columnName, ListSortDirection direction)
        {
            if (dataGridViewResults.DataSource is BindingSource bindingSource)
            {
                var data = bindingSource.List.Cast<dynamic>().ToList();

                switch (columnName)
                {
                    case "PointsInCircle":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.PointsInCircle).ToList() :
                            data.OrderByDescending(x => x.PointsInCircle).ToList();
                        break;
                    case "PointsInSegment":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.PointsInSegment).ToList() :
                            data.OrderByDescending(x => x.PointsInSegment).ToList();
                        break;
                    case "MonteCarloResult":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.MonteCarloResult).ToList() :
                            data.OrderByDescending(x => x.MonteCarloResult).ToList();
                        break;
                    case "AnalyticalResult":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.AnalyticalResult).ToList() :
                            data.OrderByDescending(x => x.AnalyticalResult).ToList();
                        break;
                    case "AbsoluteError":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => Convert.ToDouble(x.AbsoluteError)).ToList() :
                            data.OrderByDescending(x => Convert.ToDouble(x.AbsoluteError)).ToList();
                        break;
                    case "RelativeError":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => Convert.ToDouble(x.RelativeError)).ToList() :
                            data.OrderByDescending(x => Convert.ToDouble(x.RelativeError)).ToList();
                        break;
                    default:
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Id).ToList() :
                            data.OrderByDescending(x => x.Id).ToList();
                        break;
                }
            }
        }

        private void CalculateStatistics()
        {
            if (_results == null || _results.Count == 0)
                return;

            var mcResults = _results.Select(r => r.MonteCarloResult).ToList();
            double variance = StatisticCalculator.CalculateVariance(mcResults);

            lblAnalisicResult.Text = _currentParams.AnalyticalResult.ToString("F4");
            lblMean.Text = mcResults.Average().ToString("F4");
            lblMedian.Text = StatisticCalculator.CalculateMedian(mcResults).ToString("F4");
            lblMode.Text = StatisticCalculator.CalculateMode(mcResults).ToString("F4");
            lblVariance.Text = variance.ToString("F4");
            lblStdDev.Text = StatisticCalculator.CalculateStandardDeviation(variance).ToString("F4");
            lblMinimum.Text = mcResults.Min().ToString("F4");
            lblMaximum.Text = mcResults.Max().ToString("F4");
            lblRange.Text = StatisticCalculator.CalculateRange(mcResults).ToString("F4");
        }

        private void paintPanel_Paint(object sender, PaintEventArgs e)
        {
            _view.RenderAnalysis(paintPanel, e, _currentParams);

            base.OnPaint(e);
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\AnalysisForm.Designer.cs
// ==================================================


namespace Monte_Karlo
{
    partial class AnalysisForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            DataGridViewCellStyle dataGridViewCellStyle1 = new DataGridViewCellStyle();
            DataGridViewCellStyle dataGridViewCellStyle2 = new DataGridViewCellStyle();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AnalysisForm));
            tabControl1 = new TabControl();
            tabPageStats = new TabPage();
            splitContainer2 = new SplitContainer();
            groupBoxStats = new GroupBox();
            lblRange = new Label();
            lblMaximum = new Label();
            lblMinimum = new Label();
            lblStdDev = new Label();
            lblVariance = new Label();
            lblMode = new Label();
            lblMedian = new Label();
            lblMean = new Label();
            lblAnalisicResult = new Label();
            label9 = new Label();
            label8 = new Label();
            label7 = new Label();
            label6 = new Label();
            label5 = new Label();
            label4 = new Label();
            label3 = new Label();
            label2 = new Label();
            label1 = new Label();
            dataGridViewResults = new DataGridView();
            Column1 = new DataGridViewTextBoxColumn();
            Column2 = new DataGridViewTextBoxColumn();
            Column3 = new DataGridViewTextBoxColumn();
            tabPageGraph = new TabPage();
            paintPanel = new Panel();
            tabControl1.SuspendLayout();
            tabPageStats.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)splitContainer2).BeginInit();
            splitContainer2.Panel1.SuspendLayout();
            splitContainer2.Panel2.SuspendLayout();
            splitContainer2.SuspendLayout();
            groupBoxStats.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)dataGridViewResults).BeginInit();
            tabPageGraph.SuspendLayout();
            SuspendLayout();
            // 
            // tabControl1
            // 
            tabControl1.Controls.Add(tabPageStats);
            tabControl1.Controls.Add(tabPageGraph);
            tabControl1.Dock = DockStyle.Fill;
            tabControl1.Location = new Point(0, 0);
            tabControl1.Margin = new Padding(5, 6, 5, 6);
            tabControl1.Name = "tabControl1";
            tabControl1.SelectedIndex = 0;
            tabControl1.Size = new Size(1371, 900);
            tabControl1.TabIndex = 0;
            // 
            // tabPageStats
            // 
            tabPageStats.Controls.Add(splitContainer2);
            tabPageStats.Location = new Point(4, 39);
            tabPageStats.Margin = new Padding(5, 6, 5, 6);
            tabPageStats.Name = "tabPageStats";
            tabPageStats.Padding = new Padding(5, 6, 5, 6);
            tabPageStats.Size = new Size(1363, 857);
            tabPageStats.TabIndex = 0;
            tabPageStats.Text = "Статистический анализ";
            tabPageStats.UseVisualStyleBackColor = true;
            // 
            // splitContainer2
            // 
            splitContainer2.Dock = DockStyle.Fill;
            splitContainer2.Location = new Point(5, 6);
            splitContainer2.Name = "splitContainer2";
            // 
            // splitContainer2.Panel1
            // 
            splitContainer2.Panel1.Controls.Add(groupBoxStats);
            // 
            // splitContainer2.Panel2
            // 
            splitContainer2.Panel2.Controls.Add(dataGridViewResults);
            splitContainer2.Size = new Size(1353, 845);
            splitContainer2.SplitterDistance = 494;
            splitContainer2.SplitterWidth = 8;
            splitContainer2.TabIndex = 0;
            // 
            // groupBoxStats
            // 
            groupBoxStats.Controls.Add(lblRange);
            groupBoxStats.Controls.Add(lblMaximum);
            groupBoxStats.Controls.Add(lblMinimum);
            groupBoxStats.Controls.Add(lblStdDev);
            groupBoxStats.Controls.Add(lblVariance);
            groupBoxStats.Controls.Add(lblMode);
            groupBoxStats.Controls.Add(lblMedian);
            groupBoxStats.Controls.Add(lblMean);
            groupBoxStats.Controls.Add(lblAnalisicResult);
            groupBoxStats.Controls.Add(label9);
            groupBoxStats.Controls.Add(label8);
            groupBoxStats.Controls.Add(label7);
            groupBoxStats.Controls.Add(label6);
            groupBoxStats.Controls.Add(label5);
            groupBoxStats.Controls.Add(label4);
            groupBoxStats.Controls.Add(label3);
            groupBoxStats.Controls.Add(label2);
            groupBoxStats.Controls.Add(label1);
            groupBoxStats.Dock = DockStyle.Fill;
            groupBoxStats.Location = new Point(0, 0);
            groupBoxStats.Margin = new Padding(5, 6, 5, 6);
            groupBoxStats.Name = "groupBoxStats";
            groupBoxStats.Padding = new Padding(5, 6, 5, 6);
            groupBoxStats.Size = new Size(494, 845);
            groupBoxStats.TabIndex = 1;
            groupBoxStats.TabStop = false;
            groupBoxStats.Text = "Статистический анализ измерений";
            // 
            // lblRange
            // 
            lblRange.AutoSize = true;
            lblRange.Location = new Point(301, 540);
            lblRange.Margin = new Padding(5, 0, 5, 0);
            lblRange.Name = "lblRange";
            lblRange.Size = new Size(21, 30);
            lblRange.TabIndex = 11;
            lblRange.Text = "-";
            // 
            // lblMaximum
            // 
            lblMaximum.AutoSize = true;
            lblMaximum.Location = new Point(301, 480);
            lblMaximum.Margin = new Padding(5, 0, 5, 0);
            lblMaximum.Name = "lblMaximum";
            lblMaximum.Size = new Size(21, 30);
            lblMaximum.TabIndex = 17;
            lblMaximum.Text = "-";
            // 
            // lblMinimum
            // 
            lblMinimum.AutoSize = true;
            lblMinimum.Location = new Point(301, 420);
            lblMinimum.Margin = new Padding(5, 0, 5, 0);
            lblMinimum.Name = "lblMinimum";
            lblMinimum.Size = new Size(21, 30);
            lblMinimum.TabIndex = 16;
            lblMinimum.Text = "-";
            // 
            // lblStdDev
            // 
            lblStdDev.AutoSize = true;
            lblStdDev.Location = new Point(301, 360);
            lblStdDev.Margin = new Padding(5, 0, 5, 0);
            lblStdDev.Name = "lblStdDev";
            lblStdDev.Size = new Size(21, 30);
            lblStdDev.TabIndex = 10;
            lblStdDev.Text = "-";
            // 
            // lblVariance
            // 
            lblVariance.AutoSize = true;
            lblVariance.Location = new Point(301, 300);
            lblVariance.Margin = new Padding(5, 0, 5, 0);
            lblVariance.Name = "lblVariance";
            lblVariance.Size = new Size(21, 30);
            lblVariance.TabIndex = 9;
            lblVariance.Text = "-";
            // 
            // lblMode
            // 
            lblMode.AutoSize = true;
            lblMode.Location = new Point(301, 240);
            lblMode.Margin = new Padding(5, 0, 5, 0);
            lblMode.Name = "lblMode";
            lblMode.Size = new Size(21, 30);
            lblMode.TabIndex = 8;
            lblMode.Text = "-";
            // 
            // lblMedian
            // 
            lblMedian.AutoSize = true;
            lblMedian.Location = new Point(301, 180);
            lblMedian.Margin = new Padding(5, 0, 5, 0);
            lblMedian.Name = "lblMedian";
            lblMedian.Size = new Size(21, 30);
            lblMedian.TabIndex = 7;
            lblMedian.Text = "-";
            // 
            // lblMean
            // 
            lblMean.AutoSize = true;
            lblMean.Location = new Point(301, 120);
            lblMean.Margin = new Padding(5, 0, 5, 0);
            lblMean.Name = "lblMean";
            lblMean.Size = new Size(21, 30);
            lblMean.TabIndex = 6;
            lblMean.Text = "-";
            // 
            // lblAnalisicResult
            // 
            lblAnalisicResult.AutoSize = true;
            lblAnalisicResult.Location = new Point(301, 60);
            lblAnalisicResult.Margin = new Padding(5, 0, 5, 0);
            lblAnalisicResult.Name = "lblAnalisicResult";
            lblAnalisicResult.Size = new Size(21, 30);
            lblAnalisicResult.TabIndex = 13;
            lblAnalisicResult.Text = "-";
            // 
            // label9
            // 
            label9.AutoSize = true;
            label9.Location = new Point(30, 540);
            label9.Margin = new Padding(5, 0, 5, 0);
            label9.Name = "label9";
            label9.Size = new Size(86, 30);
            label9.TabIndex = 5;
            label9.Text = "Размах:";
            // 
            // label8
            // 
            label8.AutoSize = true;
            label8.Location = new Point(30, 480);
            label8.Margin = new Padding(5, 0, 5, 0);
            label8.Name = "label8";
            label8.Size = new Size(120, 30);
            label8.TabIndex = 15;
            label8.Text = "Максимум:";
            // 
            // label7
            // 
            label7.AutoSize = true;
            label7.Location = new Point(30, 420);
            label7.Margin = new Padding(5, 0, 5, 0);
            label7.Name = "label7";
            label7.Size = new Size(113, 30);
            label7.TabIndex = 14;
            label7.Text = "Минимум:";
            // 
            // label6
            // 
            label6.AutoSize = true;
            label6.Location = new Point(30, 360);
            label6.Margin = new Padding(5, 0, 5, 0);
            label6.Name = "label6";
            label6.Size = new Size(259, 30);
            label6.TabIndex = 4;
            label6.Text = "Стандартное отклонение:";
            // 
            // label5
            // 
            label5.AutoSize = true;
            label5.Location = new Point(30, 300);
            label5.Margin = new Padding(5, 0, 5, 0);
            label5.Name = "label5";
            label5.Size = new Size(123, 30);
            label5.TabIndex = 3;
            label5.Text = "Дисперсия:";
            // 
            // label4
            // 
            label4.AutoSize = true;
            label4.Location = new Point(30, 240);
            label4.Margin = new Padding(5, 0, 5, 0);
            label4.Name = "label4";
            label4.Size = new Size(71, 30);
            label4.TabIndex = 2;
            label4.Text = "Мода:";
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Location = new Point(30, 180);
            label3.Margin = new Padding(5, 0, 5, 0);
            label3.Name = "label3";
            label3.Size = new Size(105, 30);
            label3.TabIndex = 1;
            label3.Text = "Медиана:";
            // 
            // label2
            // 
            label2.AutoSize = true;
            label2.Location = new Point(30, 120);
            label2.Margin = new Padding(5, 0, 5, 0);
            label2.Name = "label2";
            label2.Size = new Size(99, 30);
            label2.TabIndex = 0;
            label2.Text = "Среднее:";
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Location = new Point(30, 60);
            label1.Margin = new Padding(5, 0, 5, 0);
            label1.Name = "label1";
            label1.Size = new Size(265, 30);
            label1.TabIndex = 12;
            label1.Text = "Аналитический результат:";
            // 
            // dataGridViewResults
            // 
            dataGridViewResults.AllowUserToAddRows = false;
            dataGridViewResults.AllowUserToDeleteRows = false;
            dataGridViewResults.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dataGridViewCellStyle1.Alignment = DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = Color.LightSteelBlue;
            dataGridViewCellStyle1.Font = new Font("Segoe UI", 9F, FontStyle.Bold);
            dataGridViewCellStyle1.ForeColor = SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = DataGridViewTriState.True;
            dataGridViewResults.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            dataGridViewResults.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            dataGridViewResults.Columns.AddRange(new DataGridViewColumn[] { Column1, Column2, Column3 });
            dataGridViewCellStyle2.Alignment = DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle2.BackColor = SystemColors.Window;
            dataGridViewCellStyle2.Font = new Font("Segoe UI", 9F);
            dataGridViewCellStyle2.ForeColor = SystemColors.ControlText;
            dataGridViewCellStyle2.SelectionBackColor = SystemColors.Highlight;
            dataGridViewCellStyle2.SelectionForeColor = SystemColors.HighlightText;
            dataGridViewCellStyle2.WrapMode = DataGridViewTriState.False;
            dataGridViewResults.DefaultCellStyle = dataGridViewCellStyle2;
            dataGridViewResults.Dock = DockStyle.Fill;
            dataGridViewResults.EnableHeadersVisualStyles = false;
            dataGridViewResults.Location = new Point(0, 0);
            dataGridViewResults.Margin = new Padding(5, 6, 5, 6);
            dataGridViewResults.Name = "dataGridViewResults";
            dataGridViewResults.ReadOnly = true;
            dataGridViewResults.RowHeadersVisible = false;
            dataGridViewResults.RowHeadersWidth = 72;
            dataGridViewResults.RowTemplate.Height = 25;
            dataGridViewResults.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            dataGridViewResults.Size = new Size(851, 845);
            dataGridViewResults.TabIndex = 2;
            dataGridViewResults.CellFormatting += DataGridViewResults_CellFormatting;
            dataGridViewResults.ColumnHeaderMouseClick += DataGridViewResults_ColumnHeaderMouseClick;
            // 
            // Column1
            // 
            Column1.HeaderText = "Column1";
            Column1.MinimumWidth = 9;
            Column1.Name = "Column1";
            Column1.ReadOnly = true;
            // 
            // Column2
            // 
            Column2.HeaderText = "Column2";
            Column2.MinimumWidth = 9;
            Column2.Name = "Column2";
            Column2.ReadOnly = true;
            // 
            // Column3
            // 
            Column3.HeaderText = "Column3";
            Column3.MinimumWidth = 9;
            Column3.Name = "Column3";
            Column3.ReadOnly = true;
            // 
            // tabPageGraph
            // 
            tabPageGraph.Controls.Add(paintPanel);
            tabPageGraph.Location = new Point(4, 39);
            tabPageGraph.Margin = new Padding(5, 6, 5, 6);
            tabPageGraph.Name = "tabPageGraph";
            tabPageGraph.Padding = new Padding(5, 6, 5, 6);
            tabPageGraph.Size = new Size(1363, 857);
            tabPageGraph.TabIndex = 1;
            tabPageGraph.Text = "Графический анализ";
            tabPageGraph.UseVisualStyleBackColor = true;
            // 
            // paintPanel
            // 
            paintPanel.BackColor = Color.White;
            paintPanel.Dock = DockStyle.Fill;
            paintPanel.Location = new Point(5, 6);
            paintPanel.Margin = new Padding(5, 6, 5, 6);
            paintPanel.Name = "paintPanel";
            paintPanel.Size = new Size(1353, 845);
            paintPanel.TabIndex = 3;
            paintPanel.Paint += paintPanel_Paint;
            // 
            // AnalysisForm
            // 
            AutoScaleDimensions = new SizeF(12F, 30F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1371, 900);
            Controls.Add(tabControl1);
            Icon = (Icon)resources.GetObject("$this.Icon");
            Margin = new Padding(5, 6, 5, 6);
            Name = "AnalysisForm";
            Text = "Анализ результатов измерений";
            Load += AnalysisForm_Load;
            tabControl1.ResumeLayout(false);
            tabPageStats.ResumeLayout(false);
            splitContainer2.Panel1.ResumeLayout(false);
            splitContainer2.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)splitContainer2).EndInit();
            splitContainer2.ResumeLayout(false);
            groupBoxStats.ResumeLayout(false);
            groupBoxStats.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)dataGridViewResults).EndInit();
            tabPageGraph.ResumeLayout(false);
            ResumeLayout(false);
        }

        #endregion
        private TabControl tabControl1;
        private TabPage tabPageStats;
        private SplitContainer splitContainer2;
        private GroupBox groupBoxStats;
        private Label lblRange;
        private Label lblMaximum;
        private Label lblMinimum;
        private Label lblStdDev;
        private Label lblVariance;
        private Label lblMode;
        private Label lblMedian;
        private Label lblMean;
        private Label lblAnalisicResult;
        private Label label9;
        private Label label8;
        private Label label7;
        private Label label6;
        private Label label5;
        private Label label4;
        private Label label3;
        private Label label2;
        private Label label1;
        private DataGridView dataGridViewResults;
        private DataGridViewTextBoxColumn Column1;
        private DataGridViewTextBoxColumn Column2;
        private DataGridViewTextBoxColumn Column3;
        private TabPage tabPageGraph;
        private Panel paintPanel;
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\DataManagementForm.cs
// ==================================================

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Monte_Karlo.DataBase;
using Monte_Karlo.Models;
using Monte_Karlo.Utilites;
using Monte_Karlo.Utilites.Calculators;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Timer = System.Windows.Forms.Timer;

namespace Monte_Karlo.Forms
{
    public partial class DataManagementForm : Form
    {
        private DatabaseHelper databaseHelper = new DatabaseHelper();
        private Logger logger = new Logger();
        private CancellationTokenSource _cts;

        public DataManagementForm()
        {
            InitializeComponent();
        }

        private void DataManagementForm_Load(object sender, EventArgs e)
        {
            LoadExperiments();
        }

        private void LoadExperiments()
        {
            try
            {
                dgvExperiments.Columns.Clear();
                var data = databaseHelper.GetAllData();
                var experiments = data
                    .Select(cp => new
                    {
                        ID = cp.Id,
                        Центр_X = cp.CenterX,
                        Центр_Y = cp.CenterY,
                        Радиус = cp.Radius,
                        Направление = cp.Direction == Direction.horizontal ?
                            "Горизонтально" :
                            "Вертикально",
                        Параметр_C = cp.C,
                        Всего_точек = cp.TotalPoints,
                        Аналитический_результат = cp.AnalyticalResult,
                        Количество_экспериментов = cp.Results.Count
                    })
                    .ToList();

                var bindingSource = new BindingSource() { DataSource = experiments };
                dgvExperiments.DataSource = bindingSource;
                dgvExperiments.Columns["ID"].Visible = false; // Скрываем ID
                lblStatus.Text = $"Загружено экспериментов: {experiments.Count}";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка загрузки данных: {ex.Message}", "Ошибка",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                logger.LogException(ex, "Ошибка загрузки данных");
            }
        }

        private void btnBackup_Click(object sender, EventArgs e)
        {
            using (var saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "SQLite база данных|*.db";
                saveDialog.Title = "Создание резервной копии";
                saveDialog.FileName = $"MonteCarlo_Backup_{DateTime.Now:yyyyMMdd_HHmmss}.db";

                if (saveDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        databaseHelper.CreateBackup(saveDialog.FileName);
                        lblStatus.Text = $"Резервная копия создана: {Path.GetFileName(saveDialog.FileName)}";
                        MessageBox.Show("Резервное копирование выполнено успешно!", "Успех",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Ошибка резервного копирования: {ex.Message}", "Ошибка",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        logger.LogException(ex, "Ошибка резервного копирования");
                    }
                }
            }
        }

        private void btnClearAll_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Вы уверены, что хотите удалить ВСЕ данные экспериментов? Это действие нельзя отменить.",
                "Подтверждение удаления", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                try
                {
                    databaseHelper.ClearDatabase();
                    LoadExperiments();
                    lblStatus.Text = "Все данные экспериментов удалены";
                    MessageBox.Show("Все данные успешно удалены.", "Успех",
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка удаления данных: {ex.Message}", "Ошибка",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    logger.LogException(ex, "Ошибка удаления данных");
                }
            }
        }

        private void btnClearSelected_Click(object sender, EventArgs e)
        {
            if (dgvExperiments.SelectedRows.Count == 0)
            {
                MessageBox.Show("Выберите эксперимент для удаления", "Информация",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var selectedId = (int)dgvExperiments.SelectedRows[0].Cells["ID"].Value;
            var centerX = dgvExperiments.SelectedRows[0].Cells["Центр_X"].Value;
            var centerY = dgvExperiments.SelectedRows[0].Cells["Центр_Y"].Value;

            if (MessageBox.Show($"Вы уверены, что хотите удалить все данные для эксперимента с центром ({centerX}, {centerY})?",
                    "Подтверждение удаления", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                try
                {
                    databaseHelper.RemoveCircleParamsById(selectedId);
                    LoadExperiments();
                    lblStatus.Text = "Выбранный эксперимент удалён";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка удаления эксперимента: {ex.Message}", "Ошибка",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    logger.LogException(ex, "Ошибка удаления эксперимента");
                }
            }
        }

        private void btnanalysisOfResults_Click(object sender, EventArgs e)
        {
            if (dgvExperiments.SelectedRows.Count == 0)
            {
                MessageBox.Show("Выберите эксперимент для анализа", "Информация",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var selectedId = (int)dgvExperiments.SelectedRows[0].Cells["ID"].Value;
            var circleParam = databaseHelper.GetDataById(selectedId);
            var form = new AnalysisForm(circleParam);
            form.ShowDialog();
        }

        private void dgvExperiments_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (dgvExperiments.RowCount == 0)
                return;

            DataGridViewColumn column = dgvExperiments.Columns[e.ColumnIndex];

            // Определяем направление сортировки
            ListSortDirection direction = column.HeaderCell.SortGlyphDirection == SortOrder.Ascending ?
                ListSortDirection.Descending :
                ListSortDirection.Ascending;

            // Сортируем данные
            SortData(column.Name, direction);

            // Обновляем иконку сортировки
            dgvExperiments.Columns.Cast<DataGridViewColumn>()
                .ToList()
                .ForEach(c => c.HeaderCell.SortGlyphDirection = SortOrder.None);

            dgvExperiments.Columns[e.ColumnIndex].HeaderCell.SortGlyphDirection = direction == ListSortDirection.Ascending ?
                SortOrder.Ascending :
                SortOrder.Descending;
        }

        private void SortData(string columnName, ListSortDirection direction)
        {
            if (dgvExperiments.DataSource is BindingSource bindingSource)
            {
                var data = bindingSource.List.Cast<dynamic>().ToList();

                switch (columnName)
                {
                    case "ID":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.ID).ToList() :
                            data.OrderByDescending(x => x.ID).ToList();
                        break;
                    case "Центр_X":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Центр_X).ToList() :
                            data.OrderByDescending(x => x.Центр_X).ToList();
                        break;
                    case "Центр_Y":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Центр_Y).ToList() :
                            data.OrderByDescending(x => x.Центр_Y).ToList();
                        break;
                    case "Радиус":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Радиус).ToList() :
                            data.OrderByDescending(x => x.Радиус).ToList();
                        break;
                    case "Направление":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Направление).ToList() :
                            data.OrderByDescending(x => x.Направление).ToList();
                        break;
                    case "Параметр_C":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Параметр_C).ToList() :
                            data.OrderByDescending(x => x.Параметр_C).ToList();
                        break;
                    case "Всего_точек":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Всего_точек).ToList() :
                            data.OrderByDescending(x => x.Всего_точек).ToList();
                        break;
                    case "Аналитический_результат":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Аналитический_результат).ToList() :
                            data.OrderByDescending(x => x.Аналитический_результат).ToList();
                        break;
                    case "Количество_экспериментов":
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.Количество_экспериментов).ToList() :
                            data.OrderByDescending(x => x.Количество_экспериментов).ToList();
                        break;
                    default:
                        bindingSource.DataSource = direction == ListSortDirection.Ascending ?
                            data.OrderBy(x => x.ID).ToList() :
                            data.OrderByDescending(x => x.ID).ToList();
                        break;
                }
            }
        }

        private async void btn1000Experiments_Click(object sender, EventArgs e)
        {
            if (btn1000Experiments.Text == "Прервать")
            {
                _cts?.Cancel();
                return;
            }

            if (dgvExperiments.SelectedRows.Count == 0)
            {
                MessageBox.Show("Выберите эксперимент для генерации", "Информация",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            string originalButtonText = btn1000Experiments.Text;
            btn1000Experiments.Text = "Прервать";
            IProgress<string> progress = new Progress<string>(s => lblStatus.Text = s);

            try
            {
                _cts = new CancellationTokenSource();
                var token = _cts.Token;
                var selectedId = (int)dgvExperiments.SelectedRows[0].Cells["ID"].Value;
                var circleParam = databaseHelper.GetDataById(selectedId);
                var point = new Point((int)circleParam.CenterX, (int)circleParam.CenterY);
                var circle = new Circle(point, (float)circleParam.Radius, circleParam.Direction, (float)circleParam.C);
                int pointsCount = circleParam.TotalPoints;
                var pointsGenerator = new PointsGenerator();
                int i = 0;
                using Timer timer = new Timer();
                timer.Interval = 100;
                timer.Tick += (object? sender, EventArgs e) =>
                {
                    progress.Report($"Генерация эксперимента {i + 1}/1000...");
                };
                timer.Start();

                for (i = 0; i < 1000; i++)
                {
                    token.ThrowIfCancellationRequested();
                    progress.Report($"Генерация эксперимента {i + 1}/1000...");

                    await pointsGenerator.GenerateRandomPointsAsync(circle, pointsCount, token);

                    var currentPoints = pointsGenerator.GetCurrentPoints();
                    var realSquare = Calculator.CalculateAnalyticArea(circle);
                    var monteCarloSquare = Calculator.CalculateMonteCarloArea(
                        circle.radius,
                        currentPoints.Points.Count,
                        currentPoints.CuttedPoints.Count);

                    await Task.Run(() => 
                    databaseHelper.SaveResults(
                        circle,
                        pointsCount,
                        currentPoints.IncludedPoints.Count,
                        currentPoints.CuttedPoints.Count,
                        realSquare,
                        monteCarloSquare));
                }
                timer.Stop();
                MessageBox.Show("1000 экспериментов успешно сгенерированы!", "Готово");
            }
            catch (OperationCanceledException)
            {
                MessageBox.Show("Операция генерации прервана", "Оповещение");
            }
            finally
            {
                btn1000Experiments.Text = originalButtonText;
                lblStatus.Text = "Готово";
                LoadExperiments();

                _cts?.Dispose();
                _cts = null;
            }
        }

        private void DataManagementForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            _cts?.Cancel();
            _cts?.Dispose();
            _cts = null;
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\DataManagementForm.Designer.cs
// ==================================================

using System.Windows.Forms;

namespace Monte_Karlo.Forms
{
    partial class DataManagementForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            DataGridViewCellStyle dataGridViewCellStyle1 = new DataGridViewCellStyle();
            DataGridViewCellStyle dataGridViewCellStyle2 = new DataGridViewCellStyle();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DataManagementForm));
            dgvExperiments = new DataGridView();
            Column1 = new DataGridViewTextBoxColumn();
            Column2 = new DataGridViewTextBoxColumn();
            Column3 = new DataGridViewTextBoxColumn();
            btnBackup = new Button();
            btnClearAll = new Button();
            btnClearSelected = new Button();
            btnanalysisOfResults = new Button();
            statusStrip = new StatusStrip();
            lblStatus = new ToolStripStatusLabel();
            tableLayoutPanel1 = new TableLayoutPanel();
            btn1000Experiments = new Button();
            ((System.ComponentModel.ISupportInitialize)dgvExperiments).BeginInit();
            statusStrip.SuspendLayout();
            tableLayoutPanel1.SuspendLayout();
            SuspendLayout();
            // 
            // dgvExperiments
            // 
            dgvExperiments.AllowUserToAddRows = false;
            dgvExperiments.AllowUserToDeleteRows = false;
            dgvExperiments.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dataGridViewCellStyle1.Alignment = DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = Color.LightSteelBlue;
            dataGridViewCellStyle1.Font = new Font("Segoe UI", 9F, FontStyle.Bold);
            dataGridViewCellStyle1.ForeColor = SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = DataGridViewTriState.True;
            dgvExperiments.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            dgvExperiments.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            dgvExperiments.Columns.AddRange(new DataGridViewColumn[] { Column1, Column2, Column3 });
            dataGridViewCellStyle2.Alignment = DataGridViewContentAlignment.MiddleCenter;
            dataGridViewCellStyle2.BackColor = SystemColors.Window;
            dataGridViewCellStyle2.Font = new Font("Segoe UI", 9F);
            dataGridViewCellStyle2.ForeColor = SystemColors.ControlText;
            dataGridViewCellStyle2.SelectionBackColor = SystemColors.Highlight;
            dataGridViewCellStyle2.SelectionForeColor = SystemColors.HighlightText;
            dataGridViewCellStyle2.WrapMode = DataGridViewTriState.False;
            dgvExperiments.DefaultCellStyle = dataGridViewCellStyle2;
            dgvExperiments.EnableHeadersVisualStyles = false;
            dgvExperiments.Location = new Point(0, 0);
            dgvExperiments.MultiSelect = false;
            dgvExperiments.Name = "dgvExperiments";
            dgvExperiments.ReadOnly = true;
            dgvExperiments.RowHeadersVisible = false;
            dgvExperiments.RowHeadersWidth = 72;
            dgvExperiments.RowTemplate.Height = 25;
            dgvExperiments.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            dgvExperiments.Size = new Size(1392, 649);
            dgvExperiments.TabIndex = 0;
            dgvExperiments.ColumnHeaderMouseClick += dgvExperiments_ColumnHeaderMouseClick;
            // 
            // Column1
            // 
            Column1.HeaderText = "Column1";
            Column1.MinimumWidth = 9;
            Column1.Name = "Column1";
            Column1.ReadOnly = true;
            // 
            // Column2
            // 
            Column2.HeaderText = "Column2";
            Column2.MinimumWidth = 9;
            Column2.Name = "Column2";
            Column2.ReadOnly = true;
            // 
            // Column3
            // 
            Column3.HeaderText = "Column3";
            Column3.MinimumWidth = 9;
            Column3.Name = "Column3";
            Column3.ReadOnly = true;
            // 
            // btnBackup
            // 
            btnBackup.Dock = DockStyle.Fill;
            btnBackup.Location = new Point(30, 10);
            btnBackup.Margin = new Padding(30, 10, 30, 10);
            btnBackup.Name = "btnBackup";
            btnBackup.Size = new Size(218, 80);
            btnBackup.TabIndex = 1;
            btnBackup.Text = "Создать резервную копию";
            btnBackup.Click += btnBackup_Click;
            // 
            // btnClearAll
            // 
            btnClearAll.Dock = DockStyle.Fill;
            btnClearAll.Location = new Point(308, 10);
            btnClearAll.Margin = new Padding(30, 10, 30, 10);
            btnClearAll.Name = "btnClearAll";
            btnClearAll.Size = new Size(218, 80);
            btnClearAll.TabIndex = 2;
            btnClearAll.Text = "Очистить все данные";
            btnClearAll.Click += btnClearAll_Click;
            // 
            // btnClearSelected
            // 
            btnClearSelected.Dock = DockStyle.Fill;
            btnClearSelected.Location = new Point(586, 10);
            btnClearSelected.Margin = new Padding(30, 10, 30, 10);
            btnClearSelected.Name = "btnClearSelected";
            btnClearSelected.Size = new Size(218, 80);
            btnClearSelected.TabIndex = 3;
            btnClearSelected.Text = "Очистить выбранный";
            btnClearSelected.Click += btnClearSelected_Click;
            // 
            // btnanalysisOfResults
            // 
            btnanalysisOfResults.Dock = DockStyle.Fill;
            btnanalysisOfResults.Location = new Point(864, 10);
            btnanalysisOfResults.Margin = new Padding(30, 10, 30, 10);
            btnanalysisOfResults.Name = "btnanalysisOfResults";
            btnanalysisOfResults.Size = new Size(218, 80);
            btnanalysisOfResults.TabIndex = 4;
            btnanalysisOfResults.Text = "Анализ результата";
            btnanalysisOfResults.Click += btnanalysisOfResults_Click;
            // 
            // statusStrip
            // 
            statusStrip.ImageScalingSize = new Size(28, 28);
            statusStrip.Items.AddRange(new ToolStripItem[] { lblStatus });
            statusStrip.Location = new Point(0, 755);
            statusStrip.Name = "statusStrip";
            statusStrip.Size = new Size(1392, 39);
            statusStrip.TabIndex = 5;
            // 
            // lblStatus
            // 
            lblStatus.Name = "lblStatus";
            lblStatus.Size = new Size(73, 30);
            lblStatus.Text = "          ";
            // 
            // tableLayoutPanel1
            // 
            tableLayoutPanel1.ColumnCount = 5;
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 20F));
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 20F));
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 20F));
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 20F));
            tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 20F));
            tableLayoutPanel1.Controls.Add(btn1000Experiments, 4, 0);
            tableLayoutPanel1.Controls.Add(btnBackup, 0, 0);
            tableLayoutPanel1.Controls.Add(btnClearAll, 1, 0);
            tableLayoutPanel1.Controls.Add(btnanalysisOfResults, 3, 0);
            tableLayoutPanel1.Controls.Add(btnClearSelected, 2, 0);
            tableLayoutPanel1.Dock = DockStyle.Bottom;
            tableLayoutPanel1.Location = new Point(0, 655);
            tableLayoutPanel1.Name = "tableLayoutPanel1";
            tableLayoutPanel1.RowCount = 1;
            tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 100F));
            tableLayoutPanel1.Size = new Size(1392, 100);
            tableLayoutPanel1.TabIndex = 6;
            // 
            // btn1000Experiments
            // 
            btn1000Experiments.Dock = DockStyle.Fill;
            btn1000Experiments.Location = new Point(1142, 10);
            btn1000Experiments.Margin = new Padding(30, 10, 30, 10);
            btn1000Experiments.Name = "btn1000Experiments";
            btn1000Experiments.Size = new Size(220, 80);
            btn1000Experiments.TabIndex = 5;
            btn1000Experiments.Text = "Провести 1000 эксперементов";
            btn1000Experiments.Click += btn1000Experiments_Click;
            // 
            // DataManagementForm
            // 
            ClientSize = new Size(1392, 794);
            Controls.Add(tableLayoutPanel1);
            Controls.Add(dgvExperiments);
            Controls.Add(statusStrip);
            Icon = (Icon)resources.GetObject("$this.Icon");
            Name = "DataManagementForm";
            Text = "Управление данными экспериментов";
            FormClosed += DataManagementForm_FormClosed;
            Load += DataManagementForm_Load;
            ((System.ComponentModel.ISupportInitialize)dgvExperiments).EndInit();
            statusStrip.ResumeLayout(false);
            statusStrip.PerformLayout();
            tableLayoutPanel1.ResumeLayout(false);
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private DataGridView dgvExperiments;
        private Button btnBackup;
        private Button btnClearAll;
        private Button btnClearSelected;
        private Button btnanalysisOfResults;
        private StatusStrip statusStrip;
        private ToolStripStatusLabel lblStatus;
        private TableLayoutPanel tableLayoutPanel1;
        private DataGridViewTextBoxColumn Column1;
        private DataGridViewTextBoxColumn Column2;
        private DataGridViewTextBoxColumn Column3;
        private Button btn1000Experiments;
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\MainForm.cs
// ==================================================

using Monte_Karlo.DataBase;
using Monte_Karlo.Forms;
using Monte_Karlo.Models;
using Monte_Karlo.Utilites;
using Monte_Karlo.Utilites.Calculators;
using Monte_Karlo.Utilites.View;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Monte_Karlo
{
    public partial class MainForm : Form
    {
        private float cofficient = 2, divisionScale = 0.5f;
        private Circle circle = new Circle();
        private int pointsCount = 100_000;

        private CancellationTokenSource _generationCts;
        private PointsGenerator _pointsGenerator;
        private MonteCarloView _view;
        private DatabaseHelper _databaseHelper;
        private Logger _logger;

        public MainForm()
        {
            InitializeComponent();
            _pointsGenerator = new PointsGenerator();
            _databaseHelper = new DatabaseHelper();
            _view = new MonteCarloView();
            _logger = new Logger();

            DoubleBuffered = true;
            typeof(Panel).InvokeMember("DoubleBuffered",
                BindingFlags.SetProperty | BindingFlags.Instance | BindingFlags.NonPublic,
                null, paintPanel, new object[] { true });
            InitializeControlPanel();
            _databaseHelper.InitializeDatabase();
            _logger.Log("Приложение запущено");
        }

        private void InitializeControlPanel()
        {
            xNumericUpDown.Value = circle.circleCenter.X;
            yNumericUpDown.Value = circle.circleCenter.Y;

            radiusTrackBar.Value = (int)circle.radius;
            radiusLabel.Text = $"Радиус круга: {radiusTrackBar.Value}";
            SetCTrackBarBorders();

            scaleTrackBar.Value = _view.GridStep;
            scaleLabel.Text = $"Масштаб: {scaleTrackBar.Value}";

            cTrackBar.Value = Convert.ToInt32(circle.C * cofficient);
            cLabel.Text = $"Значение C: {circle.C}";

            pointsCountUpdown.Value = pointsCount;
        }

        private void paintPanel_Paint(object sender, PaintEventArgs e)
        {
            try
            {
                _view.RenderToBuffer(
                    paintPanel,
                    e,
                    circle,
                    _pointsGenerator.GetCurrentPoints()
                );
            }
            catch (Exception ex)
            {
                MessageBox.Show("Произошла ошибка из-за частой переотрисовки графика.\n" +
                    "Пожалуйста, дайте время на переотрисовку графика", "Ошибка");
                Thread.Sleep(100);
                _view.RenderToBuffer(
                    paintPanel,
                    e,
                    circle,
                    _pointsGenerator.GetCurrentPoints()
                );
            }

            base.OnPaint(e);
        }

        private async void radiusSlider_Scroll(object sender, EventArgs e)
        {
            radiusLabel.Text = $"Радиус круга: {radiusTrackBar.Value}";
            circle.radius = (float)radiusTrackBar.Value;
            SetCTrackBarBorders();

            await MonteCarloCalculate(true);
        }

        private void SetCTrackBarBorders()
        {
            int border = Convert.ToInt32(circle.radius * cofficient);
            int min, max;
            if (circle.direction == Direction.vertical)
            {
                min = -border + circle.circleCenter.X * (int)cofficient;
                max = border + circle.circleCenter.X * (int)cofficient;
            }
            else
            {
                min = -border + circle.circleCenter.Y * (int)cofficient;
                max = border + circle.circleCenter.Y * (int)cofficient;
            }
            circle.C = Math.Clamp(circle.C * cofficient, min, max) * divisionScale;
            cTrackBar.Minimum = min;
            cTrackBar.Maximum = max;
            cLabel.Text = $"Значение C: {circle.C}";
        }

        private void scaleTrackbar_Scroll(object sender, EventArgs e)
        {
            scaleLabel.Text = $"Масштаб: {scaleTrackBar.Value}";
            _view.GridStep = scaleTrackBar.Value;

            paintPanel.Invalidate();
        }

        private async void pointsCountUpdown_ValueChanged(object sender, EventArgs e)
        {
            pointsCount = (int)pointsCountUpdown.Value;

            await MonteCarloCalculate(true);
        }

        private async void cTrackbar_ValueChanged(object sender, EventArgs e)
        {
            circle.C = cTrackBar.Value * divisionScale;
            cLabel.Text = $"Значение C: {circle.C}";
            await MonteCarloCalculate(false);
        }

        private async void btnGeneratePoints_Click(object sender, EventArgs e)
        {
            await MonteCarloCalculate(true);
        }

        private async void horizontalCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (circle.direction == Direction.horizontal)
                circle.direction = Direction.vertical;
            else
                circle.direction = Direction.horizontal;

            SetCTrackBarBorders();
            await MonteCarloCalculate(false);
        }

        private async Task MonteCarloCalculate(bool generateNewPoints)
        {
            if (this.Visible != true)
                return;

            _generationCts?.Cancel();
            _generationCts = new CancellationTokenSource();

            try
            {
                var token = _generationCts.Token;

                if (generateNewPoints)
                {
                    await _pointsGenerator.GenerateRandomPointsAsync(circle, pointsCount, token);
                }
                else
                {
                    await _pointsGenerator.CalculateCuttedPointsAsync(circle, pointsCount, token);
                }

                if (token.IsCancellationRequested)
                    return;

                paintPanel.Invalidate();

                var currentPoints = _pointsGenerator.GetCurrentPoints();
                double realSquare = Calculator.CalculateAnalyticArea(circle);
                var roundedRealSquare = Math.Round(realSquare, 4);
                double monteCarloSquare = Calculator.CalculateMonteCarloArea(
                    circle.radius,
                    currentPoints.Points.Count,
                    currentPoints.CuttedPoints.Count);
                var roundedMonteCarloSquare = Math.Round(monteCarloSquare, 4);

                ShowAnswereMessage(realSquare, monteCarloSquare, currentPoints);
                _logger.Log($"Сделаны расчёты с параметрами: {circle.ToString()} и количеством точек {pointsCount}");

                WriteResultOnLabels(roundedRealSquare, roundedMonteCarloSquare);
                _databaseHelper.SaveResults(
                    circle,
                    pointsCount,
                    currentPoints.IncludedPoints.Count,
                    currentPoints.CuttedPoints.Count,
                    realSquare,
                    monteCarloSquare);
            }
            catch (OperationCanceledException)
            {
                // Игнорируем отмену
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }

        private void ShowException(Exception ex)
        {
            MessageBox.Show(ex.Message, "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
            _logger.LogException(ex);
        }

        private void WriteResultOnLabels(double realSquare, double monteCarloSquare)
        {
            realSquareLabel.Text = $"Площадь секции аналитически: {realSquare:F4}";
            monteCarloSquareLabel.Text = $"Площадь методом Монте-Карло: {monteCarloSquare:F4}";
        }

        private void ShowAnswereMessage(double realSquare, double monteCarloSquare, PointsData currentPoints)
        {
            if (!showMessageCheckBox.Checked)
                return;

            double absoluteError = Calculator.CalculateAbsoluteError(realSquare, monteCarloSquare);
            double relativeError = Calculator.CalculateRelativeError(realSquare, monteCarloSquare);
            double roundAbsoluteError = Math.Round(absoluteError, 4);
            double roundRelativeError = Math.Round(relativeError, 4);
            double maxAccuracy = 1 / (double)pointsCount;
            string message = $"""
            Площадь круга: {Calculator.CircleSuare(circle.radius):F4}
            Всего точек: {currentPoints.Points.Count}
            Количество точек попавших в круг {currentPoints.IncludedPoints.Count}
            Количество точек в большей секции: {currentPoints.CuttedPoints.Count}
            Площадь секции аналитически: {realSquare:F4}
            Площадь секции методом Монте-Карло: {monteCarloSquare:F4}
            Абсолютаня погрешность вычислений: {roundAbsoluteError}
            Относительная погрешность вычислений: {roundRelativeError}%
            Максимальная точность при заданном количестве точек: {maxAccuracy}
            """;
            MessageBox.Show(message, "Результат вычислений");
        }

        private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            _generationCts?.Cancel();
            _logger.Log("Приложение закрыто");
            Application.Exit();
        }

        private void programHelpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Реализация справки
        }

        private void aboutProgramToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                var form = new AboutProgramForm();
                form.ShowDialog();
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
}

        private void btnClear_Click(object sender, EventArgs e)
        {
            try
            {
                _pointsGenerator.ClearPoints();
                paintPanel.Invalidate();
                WriteResultOnLabels(0, 0);
                _logger.Log("Очищение точек");
            }
            catch (Exception ex)
            { 
                ShowException(ex);
            }
        }

        private void closeProgramToolStripMenuItem_Click(object sender, EventArgs e) => this.Close();

        private async void xNumericUpDown_ValueChanged(object sender, EventArgs e)
        {
            circle.circleCenter.X = (int)Math.Floor(xNumericUpDown.Value);
            SetCTrackBarBorders();
            await MonteCarloCalculate(false);
        }

        private async void yNumericUpDown_ValueChanged(object sender, EventArgs e)
        {
            circle.circleCenter.Y = (int)Math.Floor(yNumericUpDown.Value);
            SetCTrackBarBorders();
            await MonteCarloCalculate(false);
        }

        private void analysisOfResultsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                var circleParam = _databaseHelper.GetData(circle, pointsCount);
                var form = new AnalysisForm(circleParam);
                form.ShowDialog();
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }

        private void paintPanel_Resize(object sender, EventArgs e)
        {
            paintPanel.Invalidate();
        }

        private void управлениеЭксперементамиToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                var form = new DataManagementForm();
                form.ShowDialog();
            }
            catch (Exception ex)
            { 
                ShowException(ex);
            }
        }
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\MainForm.Designer.cs
// ==================================================

namespace Monte_Karlo
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
            paintPanel = new Panel();
            controlPanel = new Panel();
            buttonsPanel = new Panel();
            btnClear = new Button();
            btnGeneratePoints = new Button();
            resultPanel = new Panel();
            monteCarloSquareLabel = new Label();
            realSquareLabel = new Label();
            checkBoxPanel = new Panel();
            showMessageCheckBox = new CheckBox();
            horizontalCheckBox = new CheckBox();
            circlePositionPanel = new Panel();
            yLabel = new Label();
            yNumericUpDown = new NumericUpDown();
            xLabel = new Label();
            xNumericUpDown = new NumericUpDown();
            pointCountPanel = new Panel();
            pointsCountUpdown = new NumericUpDown();
            pointsCountLabel = new Label();
            constantLinePanel = new Panel();
            cTrackBar = new TrackBar();
            cLabel = new Label();
            scalePpanel = new Panel();
            scaleTrackBar = new TrackBar();
            scaleLabel = new Label();
            radiusPanel = new Panel();
            radiusTrackBar = new TrackBar();
            radiusLabel = new Label();
            controlPanelLabel = new Label();
            menuStrip = new MenuStrip();
            programHelpToolStripMenuItem = new ToolStripMenuItem();
            aboutProgramToolStripMenuItem = new ToolStripMenuItem();
            analysisOfResultsToolStripMenuItem = new ToolStripMenuItem();
            closeProgramToolStripMenuItem = new ToolStripMenuItem();
            управлениеЭксперементамиToolStripMenuItem = new ToolStripMenuItem();
            controlPanel.SuspendLayout();
            buttonsPanel.SuspendLayout();
            resultPanel.SuspendLayout();
            checkBoxPanel.SuspendLayout();
            circlePositionPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)yNumericUpDown).BeginInit();
            ((System.ComponentModel.ISupportInitialize)xNumericUpDown).BeginInit();
            pointCountPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pointsCountUpdown).BeginInit();
            constantLinePanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)cTrackBar).BeginInit();
            scalePpanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)scaleTrackBar).BeginInit();
            radiusPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)radiusTrackBar).BeginInit();
            menuStrip.SuspendLayout();
            SuspendLayout();
            // 
            // paintPanel
            // 
            paintPanel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            paintPanel.BorderStyle = BorderStyle.FixedSingle;
            paintPanel.Location = new Point(513, 55);
            paintPanel.Margin = new Padding(4);
            paintPanel.Name = "paintPanel";
            paintPanel.Size = new Size(899, 1024);
            paintPanel.TabIndex = 0;
            paintPanel.Paint += paintPanel_Paint;
            paintPanel.Resize += paintPanel_Resize;
            // 
            // controlPanel
            // 
            controlPanel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
            controlPanel.AutoScroll = true;
            controlPanel.BackColor = SystemColors.ActiveCaption;
            controlPanel.BorderStyle = BorderStyle.Fixed3D;
            controlPanel.Controls.Add(buttonsPanel);
            controlPanel.Controls.Add(resultPanel);
            controlPanel.Controls.Add(checkBoxPanel);
            controlPanel.Controls.Add(circlePositionPanel);
            controlPanel.Controls.Add(pointCountPanel);
            controlPanel.Controls.Add(constantLinePanel);
            controlPanel.Controls.Add(scalePpanel);
            controlPanel.Controls.Add(radiusPanel);
            controlPanel.Controls.Add(controlPanelLabel);
            controlPanel.Location = new Point(15, 55);
            controlPanel.Margin = new Padding(4);
            controlPanel.Name = "controlPanel";
            controlPanel.Size = new Size(490, 1024);
            controlPanel.TabIndex = 1;
            // 
            // buttonsPanel
            // 
            buttonsPanel.BackColor = SystemColors.ActiveCaption;
            buttonsPanel.Controls.Add(btnClear);
            buttonsPanel.Controls.Add(btnGeneratePoints);
            buttonsPanel.Location = new Point(15, 781);
            buttonsPanel.Name = "buttonsPanel";
            buttonsPanel.Size = new Size(450, 108);
            buttonsPanel.TabIndex = 4;
            // 
            // btnClear
            // 
            btnClear.Location = new Point(239, 13);
            btnClear.Name = "btnClear";
            btnClear.Size = new Size(196, 82);
            btnClear.TabIndex = 1;
            btnClear.Text = "Очистить\r\nточки";
            btnClear.UseVisualStyleBackColor = true;
            btnClear.Click += btnClear_Click;
            // 
            // btnGeneratePoints
            // 
            btnGeneratePoints.Location = new Point(15, 13);
            btnGeneratePoints.Name = "btnGeneratePoints";
            btnGeneratePoints.Size = new Size(196, 82);
            btnGeneratePoints.TabIndex = 0;
            btnGeneratePoints.Text = "Генерировать\r\nточки";
            btnGeneratePoints.UseVisualStyleBackColor = true;
            btnGeneratePoints.Click += btnGeneratePoints_Click;
            // 
            // resultPanel
            // 
            resultPanel.BackColor = SystemColors.ActiveCaption;
            resultPanel.Controls.Add(monteCarloSquareLabel);
            resultPanel.Controls.Add(realSquareLabel);
            resultPanel.Location = new Point(15, 895);
            resultPanel.Name = "resultPanel";
            resultPanel.Size = new Size(450, 122);
            resultPanel.TabIndex = 9;
            // 
            // monteCarloSquareLabel
            // 
            monteCarloSquareLabel.BackColor = Color.White;
            monteCarloSquareLabel.Location = new Point(15, 58);
            monteCarloSquareLabel.Margin = new Padding(4, 0, 4, 0);
            monteCarloSquareLabel.Name = "monteCarloSquareLabel";
            monteCarloSquareLabel.Size = new Size(420, 40);
            monteCarloSquareLabel.TabIndex = 3;
            monteCarloSquareLabel.Text = "Площадь методом Монте-Карло:";
            // 
            // realSquareLabel
            // 
            realSquareLabel.BackColor = Color.White;
            realSquareLabel.Location = new Point(15, 17);
            realSquareLabel.Margin = new Padding(4, 0, 4, 0);
            realSquareLabel.Name = "realSquareLabel";
            realSquareLabel.Size = new Size(420, 40);
            realSquareLabel.TabIndex = 2;
            realSquareLabel.Text = "Площадь секции аналитически:";
            // 
            // checkBoxPanel
            // 
            checkBoxPanel.BackColor = SystemColors.ActiveCaption;
            checkBoxPanel.Controls.Add(showMessageCheckBox);
            checkBoxPanel.Controls.Add(horizontalCheckBox);
            checkBoxPanel.Location = new Point(15, 672);
            checkBoxPanel.Name = "checkBoxPanel";
            checkBoxPanel.Size = new Size(450, 100);
            checkBoxPanel.TabIndex = 8;
            // 
            // showMessageCheckBox
            // 
            showMessageCheckBox.BackColor = Color.White;
            showMessageCheckBox.CheckAlign = ContentAlignment.MiddleRight;
            showMessageCheckBox.Location = new Point(15, 52);
            showMessageCheckBox.Name = "showMessageCheckBox";
            showMessageCheckBox.Size = new Size(420, 40);
            showMessageCheckBox.TabIndex = 6;
            showMessageCheckBox.Text = "Показывать результат вычислений";
            showMessageCheckBox.UseVisualStyleBackColor = false;
            // 
            // horizontalCheckBox
            // 
            horizontalCheckBox.BackColor = Color.White;
            horizontalCheckBox.CheckAlign = ContentAlignment.MiddleRight;
            horizontalCheckBox.Checked = true;
            horizontalCheckBox.CheckState = CheckState.Checked;
            horizontalCheckBox.Location = new Point(15, 11);
            horizontalCheckBox.Name = "horizontalCheckBox";
            horizontalCheckBox.Size = new Size(420, 40);
            horizontalCheckBox.TabIndex = 5;
            horizontalCheckBox.Text = "Направление горизонтальное: ";
            horizontalCheckBox.UseVisualStyleBackColor = false;
            horizontalCheckBox.CheckedChanged += horizontalCheckBox_CheckedChanged;
            // 
            // circlePositionPanel
            // 
            circlePositionPanel.BackColor = SystemColors.ActiveCaption;
            circlePositionPanel.Controls.Add(yLabel);
            circlePositionPanel.Controls.Add(yNumericUpDown);
            circlePositionPanel.Controls.Add(xLabel);
            circlePositionPanel.Controls.Add(xNumericUpDown);
            circlePositionPanel.Location = new Point(15, 71);
            circlePositionPanel.Name = "circlePositionPanel";
            circlePositionPanel.Size = new Size(450, 70);
            circlePositionPanel.TabIndex = 7;
            // 
            // yLabel
            // 
            yLabel.BackColor = Color.White;
            yLabel.Font = new Font("Segoe UI", 12F);
            yLabel.Location = new Point(249, 15);
            yLabel.Name = "yLabel";
            yLabel.Size = new Size(41, 39);
            yLabel.TabIndex = 3;
            yLabel.Text = "Y:";
            // 
            // yNumericUpDown
            // 
            yNumericUpDown.Font = new Font("Segoe UI", 10F);
            yNumericUpDown.Location = new Point(295, 15);
            yNumericUpDown.Minimum = new decimal(new int[] { 100, 0, 0, int.MinValue });
            yNumericUpDown.Name = "yNumericUpDown";
            yNumericUpDown.Size = new Size(140, 39);
            yNumericUpDown.TabIndex = 2;
            yNumericUpDown.ValueChanged += yNumericUpDown_ValueChanged;
            // 
            // xLabel
            // 
            xLabel.BackColor = Color.White;
            xLabel.Font = new Font("Segoe UI", 12F);
            xLabel.Location = new Point(15, 15);
            xLabel.Name = "xLabel";
            xLabel.Size = new Size(41, 39);
            xLabel.TabIndex = 1;
            xLabel.Text = "X: ";
            // 
            // xNumericUpDown
            // 
            xNumericUpDown.Font = new Font("Segoe UI", 10F);
            xNumericUpDown.Location = new Point(61, 15);
            xNumericUpDown.Minimum = new decimal(new int[] { 100, 0, 0, int.MinValue });
            xNumericUpDown.Name = "xNumericUpDown";
            xNumericUpDown.Size = new Size(140, 39);
            xNumericUpDown.TabIndex = 0;
            xNumericUpDown.ValueChanged += xNumericUpDown_ValueChanged;
            // 
            // pointCountPanel
            // 
            pointCountPanel.BackColor = SystemColors.ActiveCaption;
            pointCountPanel.Controls.Add(pointsCountUpdown);
            pointCountPanel.Controls.Add(pointsCountLabel);
            pointCountPanel.Location = new Point(15, 301);
            pointCountPanel.Margin = new Padding(4);
            pointCountPanel.Name = "pointCountPanel";
            pointCountPanel.Size = new Size(450, 58);
            pointCountPanel.TabIndex = 3;
            // 
            // pointsCountUpdown
            // 
            pointsCountUpdown.Location = new Point(250, 13);
            pointsCountUpdown.Margin = new Padding(4);
            pointsCountUpdown.Maximum = new decimal(new int[] { 2000000, 0, 0, 0 });
            pointsCountUpdown.Minimum = new decimal(new int[] { 1, 0, 0, 0 });
            pointsCountUpdown.Name = "pointsCountUpdown";
            pointsCountUpdown.Size = new Size(185, 35);
            pointsCountUpdown.TabIndex = 3;
            pointsCountUpdown.TextAlign = HorizontalAlignment.Right;
            pointsCountUpdown.ThousandsSeparator = true;
            pointsCountUpdown.Value = new decimal(new int[] { 1, 0, 0, 0 });
            pointsCountUpdown.ValueChanged += pointsCountUpdown_ValueChanged;
            // 
            // pointsCountLabel
            // 
            pointsCountLabel.BackColor = Color.White;
            pointsCountLabel.Font = new Font("Segoe UI", 9F, FontStyle.Regular, GraphicsUnit.Point, 204);
            pointsCountLabel.Location = new Point(15, 8);
            pointsCountLabel.Margin = new Padding(4, 0, 4, 0);
            pointsCountLabel.Name = "pointsCountLabel";
            pointsCountLabel.Size = new Size(225, 40);
            pointsCountLabel.TabIndex = 2;
            pointsCountLabel.Text = "Количество точек:";
            pointsCountLabel.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // constantLinePanel
            // 
            constantLinePanel.BackColor = SystemColors.ActiveCaption;
            constantLinePanel.Controls.Add(cTrackBar);
            constantLinePanel.Controls.Add(cLabel);
            constantLinePanel.Location = new Point(15, 369);
            constantLinePanel.Margin = new Padding(4);
            constantLinePanel.Name = "constantLinePanel";
            constantLinePanel.Size = new Size(450, 145);
            constantLinePanel.TabIndex = 3;
            // 
            // cTrackBar
            // 
            cTrackBar.BackColor = Color.White;
            cTrackBar.LargeChange = 1;
            cTrackBar.Location = new Point(15, 55);
            cTrackBar.Margin = new Padding(4);
            cTrackBar.Maximum = 42;
            cTrackBar.Minimum = -42;
            cTrackBar.Name = "cTrackBar";
            cTrackBar.Size = new Size(420, 80);
            cTrackBar.TabIndex = 0;
            cTrackBar.Value = 1;
            cTrackBar.ValueChanged += cTrackbar_ValueChanged;
            // 
            // cLabel
            // 
            cLabel.BackColor = Color.White;
            cLabel.Font = new Font("Segoe UI", 9F, FontStyle.Regular, GraphicsUnit.Point, 204);
            cLabel.Location = new Point(15, 14);
            cLabel.Margin = new Padding(4, 0, 4, 0);
            cLabel.Name = "cLabel";
            cLabel.Size = new Size(420, 40);
            cLabel.TabIndex = 2;
            cLabel.Text = "Значение C: ";
            cLabel.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // scalePpanel
            // 
            scalePpanel.BackColor = SystemColors.ActiveCaption;
            scalePpanel.Controls.Add(scaleTrackBar);
            scalePpanel.Controls.Add(scaleLabel);
            scalePpanel.Location = new Point(15, 523);
            scalePpanel.Margin = new Padding(4);
            scalePpanel.Name = "scalePpanel";
            scalePpanel.Size = new Size(450, 140);
            scalePpanel.TabIndex = 3;
            // 
            // scaleTrackBar
            // 
            scaleTrackBar.AutoSize = false;
            scaleTrackBar.BackColor = Color.White;
            scaleTrackBar.Location = new Point(15, 51);
            scaleTrackBar.Margin = new Padding(4);
            scaleTrackBar.Maximum = 150;
            scaleTrackBar.Minimum = 10;
            scaleTrackBar.Name = "scaleTrackBar";
            scaleTrackBar.Size = new Size(420, 70);
            scaleTrackBar.SmallChange = 5;
            scaleTrackBar.TabIndex = 0;
            scaleTrackBar.TickFrequency = 5;
            scaleTrackBar.UseWaitCursor = true;
            scaleTrackBar.Value = 15;
            scaleTrackBar.Scroll += scaleTrackbar_Scroll;
            // 
            // scaleLabel
            // 
            scaleLabel.BackColor = Color.White;
            scaleLabel.Font = new Font("Segoe UI", 9F, FontStyle.Regular, GraphicsUnit.Point, 204);
            scaleLabel.Location = new Point(15, 10);
            scaleLabel.Margin = new Padding(4, 0, 4, 0);
            scaleLabel.Name = "scaleLabel";
            scaleLabel.Size = new Size(420, 40);
            scaleLabel.TabIndex = 2;
            scaleLabel.Text = "Масштаб: ";
            scaleLabel.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // radiusPanel
            // 
            radiusPanel.BackColor = SystemColors.ActiveCaption;
            radiusPanel.Controls.Add(radiusTrackBar);
            radiusPanel.Controls.Add(radiusLabel);
            radiusPanel.Location = new Point(15, 150);
            radiusPanel.Margin = new Padding(4);
            radiusPanel.Name = "radiusPanel";
            radiusPanel.Size = new Size(450, 140);
            radiusPanel.TabIndex = 1;
            // 
            // radiusTrackBar
            // 
            radiusTrackBar.BackColor = Color.White;
            radiusTrackBar.LargeChange = 1;
            radiusTrackBar.Location = new Point(15, 52);
            radiusTrackBar.Margin = new Padding(4);
            radiusTrackBar.Maximum = 20;
            radiusTrackBar.Minimum = 1;
            radiusTrackBar.Name = "radiusTrackBar";
            radiusTrackBar.Size = new Size(420, 80);
            radiusTrackBar.TabIndex = 0;
            radiusTrackBar.Value = 1;
            radiusTrackBar.Scroll += radiusSlider_Scroll;
            // 
            // radiusLabel
            // 
            radiusLabel.BackColor = Color.White;
            radiusLabel.Font = new Font("Segoe UI", 9F, FontStyle.Regular, GraphicsUnit.Point, 204);
            radiusLabel.Location = new Point(15, 11);
            radiusLabel.Margin = new Padding(4, 0, 4, 0);
            radiusLabel.Name = "radiusLabel";
            radiusLabel.Size = new Size(420, 40);
            radiusLabel.TabIndex = 2;
            radiusLabel.Text = "Радиус круга: ";
            radiusLabel.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // controlPanelLabel
            // 
            controlPanelLabel.BackColor = Color.Transparent;
            controlPanelLabel.Font = new Font("Segoe UI", 12F, FontStyle.Underline, GraphicsUnit.Point, 204);
            controlPanelLabel.Location = new Point(15, 13);
            controlPanelLabel.Margin = new Padding(4, 0, 4, 0);
            controlPanelLabel.Name = "controlPanelLabel";
            controlPanelLabel.Size = new Size(450, 55);
            controlPanelLabel.TabIndex = 0;
            controlPanelLabel.Text = "Панель управления";
            controlPanelLabel.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // menuStrip
            // 
            menuStrip.ImageScalingSize = new Size(28, 28);
            menuStrip.Items.AddRange(new ToolStripItem[] { programHelpToolStripMenuItem, aboutProgramToolStripMenuItem, analysisOfResultsToolStripMenuItem, управлениеЭксперементамиToolStripMenuItem, closeProgramToolStripMenuItem });
            menuStrip.Location = new Point(0, 0);
            menuStrip.Name = "menuStrip";
            menuStrip.Size = new Size(1425, 38);
            menuStrip.TabIndex = 4;
            menuStrip.Text = "menuStrip1";
            // 
            // programHelpToolStripMenuItem
            // 
            programHelpToolStripMenuItem.Name = "programHelpToolStripMenuItem";
            programHelpToolStripMenuItem.Size = new Size(111, 34);
            programHelpToolStripMenuItem.Text = "Справка";
            programHelpToolStripMenuItem.Click += programHelpToolStripMenuItem_Click;
            // 
            // aboutProgramToolStripMenuItem
            // 
            aboutProgramToolStripMenuItem.Name = "aboutProgramToolStripMenuItem";
            aboutProgramToolStripMenuItem.Size = new Size(161, 34);
            aboutProgramToolStripMenuItem.Text = "О программе";
            aboutProgramToolStripMenuItem.Click += aboutProgramToolStripMenuItem_Click;
            // 
            // analysisOfResultsToolStripMenuItem
            // 
            analysisOfResultsToolStripMenuItem.Name = "analysisOfResultsToolStripMenuItem";
            analysisOfResultsToolStripMenuItem.Size = new Size(222, 34);
            analysisOfResultsToolStripMenuItem.Text = "Анализ результатов";
            analysisOfResultsToolStripMenuItem.Click += analysisOfResultsToolStripMenuItem_Click;
            // 
            // closeProgramToolStripMenuItem
            // 
            closeProgramToolStripMenuItem.Name = "closeProgramToolStripMenuItem";
            closeProgramToolStripMenuItem.Size = new Size(237, 34);
            closeProgramToolStripMenuItem.Text = "Закрыть приложение";
            closeProgramToolStripMenuItem.Click += closeProgramToolStripMenuItem_Click;
            // 
            // управлениеЭксперементамиToolStripMenuItem
            // 
            управлениеЭксперементамиToolStripMenuItem.Name = "управлениеЭксперементамиToolStripMenuItem";
            управлениеЭксперементамиToolStripMenuItem.Size = new Size(313, 34);
            управлениеЭксперементамиToolStripMenuItem.Text = "Управление эксперементами";
            управлениеЭксперементамиToolStripMenuItem.Click += управлениеЭксперементамиToolStripMenuItem_Click;
            // 
            // MainForm
            // 
            AutoScaleDimensions = new SizeF(12F, 30F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1425, 1092);
            Controls.Add(controlPanel);
            Controls.Add(paintPanel);
            Controls.Add(menuStrip);
            DoubleBuffered = true;
            Icon = (Icon)resources.GetObject("$this.Icon");
            MainMenuStrip = menuStrip;
            Margin = new Padding(4);
            Name = "MainForm";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Основное окно";
            FormClosed += MainForm_FormClosed;
            controlPanel.ResumeLayout(false);
            buttonsPanel.ResumeLayout(false);
            resultPanel.ResumeLayout(false);
            checkBoxPanel.ResumeLayout(false);
            circlePositionPanel.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)yNumericUpDown).EndInit();
            ((System.ComponentModel.ISupportInitialize)xNumericUpDown).EndInit();
            pointCountPanel.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)pointsCountUpdown).EndInit();
            constantLinePanel.ResumeLayout(false);
            constantLinePanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)cTrackBar).EndInit();
            scalePpanel.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)scaleTrackBar).EndInit();
            radiusPanel.ResumeLayout(false);
            radiusPanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)radiusTrackBar).EndInit();
            menuStrip.ResumeLayout(false);
            menuStrip.PerformLayout();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Panel paintPanel;
        private Panel controlPanel;
        private Label controlPanelLabel;
        private Panel radiusPanel;
        private Label radiusLabel;
        public TrackBar radiusTrackBar;
        private Panel pointCountPanel;
        private Label pointsCountLabel;
        private Panel scalePpanel;
        public TrackBar scaleTrackBar;
        private Label scaleLabel;
        private NumericUpDown pointsCountUpdown;
        private Panel constantLinePanel;
        public TrackBar cTrackBar;
        private Label cLabel;
        private Label realSquareLabel;
        private Label monteCarloSquareLabel;
        private CheckBox horizontalCheckBox;
        private MenuStrip menuStrip;
        private ToolStripMenuItem programHelpToolStripMenuItem;
        private ToolStripMenuItem aboutProgramToolStripMenuItem;
        private ToolStripMenuItem closeProgramToolStripMenuItem;
        private CheckBox showMessageCheckBox;
        private Panel circlePositionPanel;
        private Label yLabel;
        private NumericUpDown yNumericUpDown;
        private Label xLabel;
        private NumericUpDown xNumericUpDown;
        private ToolStripMenuItem analysisOfResultsToolStripMenuItem;
        private Panel checkBoxPanel;
        private Panel resultPanel;
        private Panel buttonsPanel;
        private Button btnGeneratePoints;
        private Button btnClear;
        private ToolStripMenuItem управлениеЭксперементамиToolStripMenuItem;
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\SplashScreenForm.cs
// ==================================================

using System.Diagnostics;

namespace Monte_Karlo
{
    public partial class SplashScreenForm : Form
    {
        private int _time = 0;
        private int _timeout = 3;    // ����� �� ��������������� �������� ��������

        public SplashScreenForm()
        {
            InitializeComponent();
            SetTransparentColor(authorLabel, pictureBox1);
        }

        public void SetTransparentColor(Control control, Control parent)
        {
            if (parent == control)
                return;
            control.Parent = parent;
            control.BackColor = Color.Transparent;
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            var form = new MainForm();
            form.WindowState = FormWindowState.Normal;
            form.Show();
            this.Hide();
        }

        private void Screensaver_Load(object sender, EventArgs e)
        {
            timer1.Start();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (++_time >= _timeout)
            { 
                timer1.Stop();
                startButton.PerformClick();
            }
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Forms\SplashScreenForm.Designer.cs
// ==================================================

namespace Monte_Karlo
{
    partial class SplashScreenForm
    {
        /// <summary>
        ///  Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        ///  Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        ///  Required method for Designer support - do not modify
        ///  the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SplashScreenForm));
            startButton = new Button();
            pictureBox1 = new PictureBox();
            authorLabel = new Label();
            panel1 = new Panel();
            label1 = new Label();
            label2 = new Label();
            label3 = new Label();
            label4 = new Label();
            label5 = new Label();
            label6 = new Label();
            timer1 = new System.Windows.Forms.Timer(components);
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            panel1.SuspendLayout();
            SuspendLayout();
            // 
            // startButton
            // 
            startButton.BackColor = Color.FromArgb(174, 206, 180);
            startButton.Font = new Font("Segoe UI", 14F);
            startButton.Location = new Point(15, 469);
            startButton.Name = "startButton";
            startButton.Size = new Size(480, 84);
            startButton.TabIndex = 5;
            startButton.Text = "Перейти к программе";
            startButton.UseVisualStyleBackColor = false;
            startButton.Click += startButton_Click;
            // 
            // pictureBox1
            // 
            pictureBox1.Dock = DockStyle.Fill;
            pictureBox1.Image = (Image)resources.GetObject("pictureBox1.Image");
            pictureBox1.Location = new Point(0, 0);
            pictureBox1.Name = "pictureBox1";
            pictureBox1.Size = new Size(571, 566);
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox1.TabIndex = 0;
            pictureBox1.TabStop = false;
            // 
            // authorLabel
            // 
            authorLabel.AutoSize = true;
            authorLabel.Location = new Point(17, 523);
            authorLabel.Name = "authorLabel";
            authorLabel.Size = new Size(460, 30);
            authorLabel.TabIndex = 7;
            authorLabel.Text = "Сделал студент группы ИСП-304 Гудзь Андрей";
            // 
            // panel1
            // 
            panel1.Controls.Add(authorLabel);
            panel1.Controls.Add(pictureBox1);
            panel1.Dock = DockStyle.Right;
            panel1.Location = new Point(510, 0);
            panel1.Name = "panel1";
            panel1.Size = new Size(571, 566);
            panel1.TabIndex = 8;
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Font = new Font("Segoe UI", 14F);
            label1.Location = new Point(15, 37);
            label1.Name = "label1";
            label1.Size = new Size(364, 45);
            label1.TabIndex = 9;
            label1.Text = "Данные в варианте 25:";
            // 
            // label2
            // 
            label2.AutoSize = true;
            label2.Font = new Font("Segoe UI", 14F);
            label2.Location = new Point(15, 104);
            label2.Name = "label2";
            label2.Size = new Size(91, 45);
            label2.TabIndex = 10;
            label2.Text = "X0: 3";
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 14F);
            label3.Location = new Point(15, 169);
            label3.Name = "label3";
            label3.Size = new Size(90, 45);
            label3.TabIndex = 11;
            label3.Text = "Y0: 1";
            // 
            // label4
            // 
            label4.AutoSize = true;
            label4.Font = new Font("Segoe UI", 14F);
            label4.Location = new Point(15, 235);
            label4.Name = "label4";
            label4.Size = new Size(74, 45);
            label4.TabIndex = 12;
            label4.Text = "R: 2";
            // 
            // label5
            // 
            label5.AutoSize = true;
            label5.Font = new Font("Segoe UI", 14F);
            label5.Location = new Point(15, 295);
            label5.Name = "label5";
            label5.Size = new Size(463, 45);
            label5.TabIndex = 13;
            label5.Text = "Направление: горизонтально";
            // 
            // label6
            // 
            label6.AutoSize = true;
            label6.Font = new Font("Segoe UI", 14F);
            label6.Location = new Point(15, 358);
            label6.Name = "label6";
            label6.Size = new Size(74, 45);
            label6.TabIndex = 14;
            label6.Text = "C: 2";
            // 
            // timer1
            // 
            timer1.Interval = 1000;
            timer1.Tick += timer1_Tick;
            // 
            // SplashScreenForm
            // 
            AutoScaleDimensions = new SizeF(12F, 30F);
            AutoScaleMode = AutoScaleMode.Font;
            BackColor = Color.White;
            ClientSize = new Size(1081, 566);
            Controls.Add(label6);
            Controls.Add(label5);
            Controls.Add(label4);
            Controls.Add(label3);
            Controls.Add(label2);
            Controls.Add(label1);
            Controls.Add(panel1);
            Controls.Add(startButton);
            FormBorderStyle = FormBorderStyle.None;
            Icon = (Icon)resources.GetObject("$this.Icon");
            Name = "SplashScreenForm";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Заставка";
            Load += Screensaver_Load;
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            panel1.ResumeLayout(false);
            panel1.PerformLayout();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion
        private Button startButton;
        private PictureBox pictureBox1;
        private Label authorLabel;
        private Panel panel1;
        private Label label1;
        private Label label2;
        private Label label3;
        private Label label4;
        private Label label5;
        private Label label6;
        private System.Windows.Forms.Timer timer1;
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Models\Circle.cs
// ==================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.Models
{
    public class Circle
    {
        public Point circleCenter = new Point(3, 1);
        public float radius = 2;
        public Direction direction = Direction.horizontal;
        public float C = 2;

        public Circle() { }

        public Circle(Point circleCenter, float radius, Direction direction, float c)
        {
            this.circleCenter = circleCenter;
            this.radius = radius;
            this.direction = direction;
            this.C = c;
        }

        public override bool Equals(object obj)
        {
            return obj is Circle other &&
                circleCenter.X == other.circleCenter.X &&
                circleCenter.Y == other.circleCenter.Y &&
                radius == other.radius &&
                direction == other.direction &&
                C == other.C;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(circleCenter.X, circleCenter.Y, radius, direction, C);
        }

        public override string ToString()
        {
            return $"CircleCenter: {circleCenter}, Radius: {radius}, Direction: {direction}, C: {C}";
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Models\CircleParams.cs
// ==================================================

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.Models
{
    public class CircleParams
    {
        [Key]
        public int Id { get; set; }

        public double CenterX { get; set; }
        public double CenterY { get; set; }
        public double Radius { get; set; }
        public Direction Direction { get; set; }
        public double C { get; set; }
        public int TotalPoints { get; set; }
        public double AnalyticalResult { get; set; }

        public List<SimulationResult> Results { get; set; } = new List<SimulationResult>();

        public override string ToString()
        {
            return $"""
                   Id: {Id}, CenterX: {CenterX}, CenterY: {CenterY}, Radius: {Radius}, 
                   Direction: {Direction}, C: {C}, TotalPoints: {TotalPoints},
                   AnalyticalResult: {AnalyticalResult}, ResultsCount: {Results.Count}
                   """;
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Models\Direction.cs
// ==================================================

namespace Monte_Karlo.Models
{
    public enum Direction
    {
        horizontal,
        vertical
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Models\PointsData.cs
// ==================================================

namespace Monte_Karlo.Models
{
    public class PointsData
    {
        public List<PointF> Points { get; set; } = new();
        public List<PointF> IncludedPoints { get; set; } = new();
        public List<PointF> ExcludedPoints { get; set; } = new();
        public List<PointF> CuttedPoints { get; set; } = new();
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Models\SimulationResult.cs
// ==================================================

using System.ComponentModel.DataAnnotations;

namespace Monte_Karlo.Models
{
    public class SimulationResult
    {
        [Key]
        public int Id { get; set; }

        public int PointsInCircle { get; set; }
        public int PointsInSegment { get; set; }
        public double MonteCarloResult { get; set; }

        public int CircleParamsId { get; set; }
        public CircleParams CircleParams { get; set; }

        public override string ToString()
        {
            return $"""
                   Id: {Id}, PointsInCircle: {PointsInCircle}, PointsInSegment: {PointsInSegment},
                   MonteCarloResult: {MonteCarloResult}, CircleParamsId: {CircleParamsId}
                   """;
        }
    }
}



// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Program.cs
// ==================================================

using Monte_Karlo.DataBase;
using Monte_Karlo.Models;

namespace Monte_Karlo
{
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            // To customize application configuration such as set high DPI settings or default font,
            // see https://aka.ms/applicationconfiguration.
            ApplicationConfiguration.Initialize();
            if (System.Diagnostics.Process.GetProcessesByName(System.Diagnostics.Process.GetCurrentProcess().ProcessName).Length > 1)
            {
                MessageBox.Show(
                    "��������� ��� ��������.",
                    "����������",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information
                );
                return;
            }
            Application.Run(new SplashScreenForm());
        }
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Properties\Resources.Designer.cs
// ==================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Monte_Karlo.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Monte_Karlo.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ChatGPT_Image_18_июн__2025_г___13_23_30 {
            get {
                object obj = ResourceManager.GetObject("ChatGPT Image 18 июн. 2025 г., 13_23_30", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\Calculators\Calculator.cs
// ==================================================

using Monte_Karlo.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.Utilites.Calculators
{
    public static class Calculator
    {
        public static double CalculateAnalyticArea(Circle circle)
        {
            Point center = circle.circleCenter;
            double R = circle.radius;
            Direction direction = circle.direction;
            double C = circle.C;

            if (R == 0)
                throw new ArgumentException("R == 0");

            if (direction == Direction.horizontal)
            {
                double yLine = C;
                double d = Math.Abs(center.Y - yLine);  // расстояние от центра до хорды
                double h = Math.Abs(R - d);             // расстояние от хорды до окружности
                double CircleArea = Math.PI * R * R;

                if (d >= R)
                    return CircleArea;
                if (h == R)
                    return CircleArea / 2;

                double segmentArea = GetSegmentArea(R, d);
                return CircleArea - segmentArea;
            }
            else
            {
                double xLine = C;
                double d = Math.Abs(center.X - xLine);  // расстояние от центра до хорды
                double h = Math.Abs(R - d);             // расстояние от хорды до окружности
                double CircleArea = Math.PI * R * R;

                if (d >= R)
                    return CircleArea;
                if (h == R)
                    return CircleArea / 2;

                double segmentArea = GetSegmentArea(R, d);
                return CircleArea - segmentArea;
            }
        }

        // https://en.wikipedia.org/wiki/Circular_segment
        private static double GetSegmentArea(double R, double d)
        {
            return R * R * Math.Acos(d / R) - d * Math.Sqrt(R * R - d * d);
        }

        public static double CircleSuare(double R) => Math.PI * R * R;

        public static double CalculateMonteCarloArea(float radius, int allPoints, int cuttedPoints)
        {
            double squareArea = 4 * radius * radius;
            return cuttedPoints / (double)allPoints * squareArea;
        }

        public static double CalculateAbsoluteError(double expectedResult, double actualResult)
        {
            var result = expectedResult - actualResult;
            result = RoundToTwoSignificantDigits(result, 2);
            return result;
        }

        public static double CalculateRelativeError(double expectedResult, double actualResult)
        {
            if (expectedResult <= 0)
                throw new ArgumentException("Ожидаемое значение не может быть <= 0");
            if (actualResult < 0)
                throw new ArgumentException("Полученное значение не может быть < 0");
            var result = Math.Abs(CalculateAbsoluteError(expectedResult, actualResult)) / expectedResult * 100d;
            result = RoundToTwoSignificantDigits(result, 2);
            return result;
        }

        public static double RoundToTwoSignificantDigits(double value, int significantDigits)
        {
            if (value == 0.0)
                return 0.0;

            int log10 = (int)Math.Floor(Math.Log10(Math.Abs(value)));
            double scale = Math.Pow(10, significantDigits - log10 - 1);
            double rounded = Math.Round(value * scale) / scale;

            // Убираем возможные артефакты округления (например, 0.30000000000000004)
            return BitConverter.Int64BitsToDouble(BitConverter.DoubleToInt64Bits(rounded));
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\Calculators\StatisticCalculator.cs
// ==================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.Utilites.Calculators
{
    public static class StatisticCalculator
    {
        public static double CalculateMedian(List<double> values)
        {
            var sorted = values.OrderBy(x => x).ToList();
            int count = sorted.Count;

            if (count % 2 == 0)
                return (sorted[count / 2 - 1] + sorted[count / 2]) / 2;
            else
                return sorted[count / 2];
        }

        public static double CalculateMode(List<double> values)
        {
            return values.GroupBy(x => x)
                       .OrderByDescending(g => g.Count())
                       .First()
                       .Key;
        }

        // Дисперсия
        public static double CalculateVariance(List<double> values)
        {
            double mean = values.Average();
            return values.Average(Xi => Math.Pow(mean - Xi, 2));
        }

        // Среднее отклонение
        public static double CalculateStandardDeviation(double variance)
        {
            return Math.Sqrt(variance);
        }

        // Среднее отклонение через список
        public static double CalculateStandardDeviation(List<double> values)
        {
            return CalculateStandardDeviation(CalculateVariance(values));
        }

        public static double CalculateRange(List<double> values) => values.Max() - values.Min();
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\Logger.cs
// ==================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.Utilites
{
    public class Logger
    {
        private string logDir = Path.Combine(Application.StartupPath, "Logs");
        public void Log(string message)
        {
            string logFile = Path.Combine(logDir, DateTime.Now.ToString("yyyy-MM-dd") + ".log");

            try
            {
                if (!Directory.Exists(logDir))
                    Directory.CreateDirectory(logDir);

                string timestamp = DateTime.Now.ToString("HH:mm:ss");
                string line = $"[{timestamp}] {message}";

                File.AppendAllText(logFile, line + Environment.NewLine);
                System.Diagnostics.Debug.WriteLine("[LOG] " + line);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("[LOG ERROR] " + ex.Message);
                LogException(ex, message);
            }
        }

        public void LogException(Exception exception, string message = "")
        {
            System.Diagnostics.Debug.WriteLine($"[ERROR] {message} {exception.Message}\n{exception.StackTrace}");

            string logFile = Path.Combine(logDir, DateTime.Now.ToString("error") + ".log");

            try
            {
                if (!Directory.Exists(logDir))
                    Directory.CreateDirectory(logDir);

                string timestamp = DateTime.Now.ToString("yyyy-MM-dd - HH:mm:ss");
                string line = $"[{timestamp}] {message} {exception.Message}\n{exception.StackTrace}";

                File.AppendAllText(logFile, line + Environment.NewLine);
                System.Diagnostics.Debug.WriteLine("[LOG] " + line);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("[LOG ERROR] " + ex.Message);
            }
        }
    }
}


// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\NumericStringComparer.cs
// ==================================================

namespace Monte_Karlo.Utilites
{
    class NumericStringComparer : IComparer<string>
    {
        public int Compare(string x, string y)
        {
            // Пытаемся преобразовать строки в числа
            if (double.TryParse(x, out double numX) && double.TryParse(y, out double numY))
            {
                return numX.CompareTo(numY);
            }

            // Если хотя бы одну строку не удалось преобразовать, сравниваем как строки
            return string.Compare(x, y, StringComparison.Ordinal);
        }
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\PointsGenerator.cs
// ==================================================

using Monte_Karlo.Models;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Monte_Karlo.Utilites
{
    public class PointsGenerator
    {
        private readonly SemaphoreSlim _semaphore = new(1, 1);
        private PointsData _currentPoints = new();

        public async Task GenerateRandomPointsAsync(Circle circle, int count, CancellationToken token)
        {
            try
            {
                await _semaphore.WaitAsync(token);
                token.ThrowIfCancellationRequested();

                var newPoints = new PointsData();
                newPoints.Points = new List<PointF>(count);

                float radius = circle.radius;

                await Task.Run(() =>
                {
                    var parallelOptions = new ParallelOptions
                    {
                        CancellationToken = token,
                        MaxDegreeOfParallelism = Environment.ProcessorCount
                    };

                    GeneratePoints(newPoints, count, radius, parallelOptions);
                    token.ThrowIfCancellationRequested();
                    CalculateIncludedPoints(newPoints, radius, parallelOptions);
                    token.ThrowIfCancellationRequested();
                    CalculateCuttedPoints(newPoints, circle, parallelOptions);
                }, token);

                _currentPoints = newPoints;
            }
            finally
            {
                _semaphore.Release();
            }
        }

        public async Task CalculateCuttedPointsAsync(Circle circle, int count, CancellationToken token)
        {
            try
            {
                await _semaphore.WaitAsync(token);
                token.ThrowIfCancellationRequested();

                if (_currentPoints.Points.Count == 0)
                {
                    await GenerateRandomPointsAsync(circle, count, token);
                    return;
                }

                await Task.Run(() =>
                {
                    var parallelOptions = new ParallelOptions
                    {
                        CancellationToken = token,
                        MaxDegreeOfParallelism = Environment.ProcessorCount
                    };
                    CalculateCuttedPoints(_currentPoints, circle, parallelOptions);
                }, token);
            }
            finally
            {
                _semaphore.Release();
            }
        }

        public void ClearPoints()
        {
            _currentPoints = new PointsData();
        }

        public PointsData GetCurrentPoints()
        {
            return _currentPoints;
        }

        private static void GeneratePoints(PointsData pointsData, int count, float radius, ParallelOptions parallelOptions)
        {
            var random = new ThreadLocal<Random>(() => new Random(Guid.NewGuid().GetHashCode()));

            var points = new PointF[count];
            Parallel.For(0, count, parallelOptions, i =>
            {
                float x = (float)random.Value.NextDouble() * radius * 2 - radius;
                float y = (float)random.Value.NextDouble() * radius * 2 - radius;
                points[i] = new PointF(x, y);
            });

            pointsData.Points = points.ToList();
        }

        private static void CalculateIncludedPoints(PointsData pointsData, float radius, ParallelOptions parallelOptions)
        {
            float radiusSquared = radius * radius;
            var includedPoints = new ConcurrentBag<PointF>();
            var excludedPoints = new ConcurrentBag<PointF>();

            Parallel.ForEach(pointsData.Points, parallelOptions, point =>
            {
                float distanceSquared = point.X * point.X + point.Y * point.Y;

                if (distanceSquared < radiusSquared)
                {
                    includedPoints.Add(point);
                }
                else
                {
                    excludedPoints.Add(point);
                }
            });

            pointsData.IncludedPoints = includedPoints.ToList();
            pointsData.ExcludedPoints = excludedPoints.ToList();
        }

        private static void CalculateCuttedPoints(PointsData pointsData, Circle circle, ParallelOptions parallelOptions)
        {
            if (pointsData.IncludedPoints.Count == 0)
                return;

            var cuttedPoints = new ConcurrentBag<PointF>();
            Point center = circle.circleCenter;
            Direction direction = circle.direction;
            float C = circle.C;

            if (direction == Direction.vertical)
            {
                bool lefter = C < center.X;
                float centerX = center.X;

                Parallel.ForEach(pointsData.IncludedPoints, parallelOptions, point =>
                {
                    bool condition = lefter
                        ? point.X + centerX >= C
                        : point.X + centerX <= C;

                    if (condition)
                    {
                        cuttedPoints.Add(point);
                    }
                });
            }
            else // horizontal
            {
                bool downer = C < center.Y;
                float centerY = center.Y;

                Parallel.ForEach(pointsData.IncludedPoints, parallelOptions, point =>
                {
                    bool condition = downer
                        ? centerY + point.Y >= C
                        : centerY + point.Y <= C;

                    if (condition)
                    {
                        cuttedPoints.Add(point);
                    }
                });
            }

            pointsData.CuttedPoints = cuttedPoints.ToList();
        }
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\View\AnalysisView.cs
// ==================================================

using Monte_Karlo.Models;
using Monte_Karlo.Utilites.Calculators;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using static System.Net.Mime.MediaTypeNames;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Monte_Karlo.Utilites.View
{
    public class AnalysisView
    {
        // Цвета элементов
        private static readonly Color _analyticalColor = Color.Blue;
        private static readonly Color _pointsColor = Color.Green;
        private static readonly Color _meanColor = Color.Red;
        private static readonly Color _modeColor = Color.Purple;
        private static readonly Color _minMaxColor = Color.Orange;
        private static readonly Color _backgroundColor = Color.White;
        private static readonly Color _gridColor = Color.LightGray;
        private static readonly Padding _padding = new Padding(50, 20, 70, 40);
        private static readonly double _percentYPadding = 0.1;
        private static readonly System.Drawing.Font _textFont = SystemFonts.DefaultFont;
        private static readonly Brush _textBrush = Brushes.Black;
        private static readonly float _pointRadius = 4;

        public void RenderAnalysis(Panel panel, PaintEventArgs e, CircleParams circleParams)
        {
            var g = e.Graphics;
            g.Clear(_backgroundColor);

            if (circleParams == null || circleParams.Results == null || circleParams.Results.Count == 0)
            {
                MessageBox.Show("Нет результатов для анализа", "Оповещение");
                return;
            }

            OnPaint(panel, g, circleParams);
        }

        private void OnPaint(Panel panel, Graphics g, CircleParams circleParams)
        {
            List<double> mcResults = circleParams.Results.Select(r => r.MonteCarloResult).ToList();
            double analyticalValue = circleParams.AnalyticalResult;

            double mean = mcResults.Average();
            double mode = StatisticCalculator.CalculateMode(mcResults);
            double min = mcResults.Min();
            double max = mcResults.Max();

            Rectangle plotArea = new Rectangle(_padding.Left, _padding.Top, panel.Width - _padding.Right, panel.Height - _padding.Bottom);

            double yMin = Math.Min(analyticalValue, min);
            double yMax = Math.Max(analyticalValue, max);
            double yRange = yMax - yMin;
            yMin -= yRange * _percentYPadding;
            yMax += yRange * _percentYPadding;
            yRange = yMax - yMin;

            DrawGrid(g, plotArea, mcResults.Count, yMin, yMax);

            DrawAnalyticalLine(g, plotArea, analyticalValue, yMin, yRange);
            DrawMonteCarloPoints(g, plotArea, mcResults, yMin, yRange);
            DrawMeanLine(g, plotArea, mean, yMin, yRange);
            DrawModeLine(g, plotArea, mode, yMin, yRange);
            DrawMinMaxLines(g, plotArea, min, max, yMin, yRange);
            DrawLegend(g, plotArea, mode);
        }

        private void DrawGrid(Graphics g, Rectangle plotArea, int pointsCount, double yMin, double yMax)
        {
            Pen girdPen = new Pen(_gridColor);

            g.DrawRectangle(girdPen, plotArea);

            // Вертикальные линии (каждые 10% экспериментов)
            int step = Math.Max(1, pointsCount / 10);
            for (int i = 0; i <= pointsCount; i += step)
            {
                float x = plotArea.Left + plotArea.Width * i / pointsCount;
                g.DrawLine(girdPen, x, plotArea.Top, x, plotArea.Bottom);

                // Подписи номеров экспериментов
                string text = i.ToString();
                SizeF textSize = g.MeasureString(text, _textFont);
                float textX = x - textSize.Width / 2;
                float textY = plotArea.Bottom - textSize.Height;

                // особое расположение для 0
                if (i == 0)
                    textX += textSize.Width;

                g.DrawString(text, _textFont, _textBrush, textX, textY);
            }

            // Горизонтальные линии сетки (7 линий)
            int linesCount = 7 - 1;
            for (int i = 0; i <= linesCount; i++)
            {
                float y = plotArea.Top + plotArea.Height * i / linesCount;
                g.DrawLine(girdPen, plotArea.Left, y, plotArea.Right, y);

                // Подписи значений
                double yRange = yMax - yMin;
                double value = yMax - yRange * i / linesCount;
                string text = value.ToString("F2");
                SizeF textSize = g.MeasureString(text, _textFont);
                float textX = plotArea.Left - textSize.Width;
                float textY = y - textSize.Height / 2;

                g.DrawString(text, _textFont, _textBrush, textX, textY);
            }

        }

        private void DrawAnalyticalLine(Graphics g, Rectangle area, double value, double yMin, double yRange)
        {
            float y = area.Bottom - (float)((value - yMin) / yRange * area.Height);
            g.DrawLine(new Pen(_analyticalColor, 4), area.Left, y, area.Right, y);
        }

        private void DrawMonteCarloPoints(Graphics g, Rectangle area, List<double> results, double yMin, double yRange)
        {
            if (results == null || results.Count == 0)
                return;

            int count = results.Count;
            float width = area.Width;
            float height = area.Height;
            float left = area.Left;
            float bottom = area.Bottom;

            // Предварительно вычисляем часто используемые значения
            float xStep = width / (count - 1);
            float yScale = height / (float)yRange;

            // Используем один экземпляр кисти для всех точек
            using (SolidBrush brush = new SolidBrush(_pointsColor))
            {
                float diameter = 2 * _pointRadius;

                for (int i = 0; i < count; i++)
                {
                    try
                    {
                        float x = left + i * xStep;
                        float y = bottom - (float)((results[i] - yMin) * yScale);
                        g.FillEllipse(brush, x - _pointRadius, y - _pointRadius, diameter, diameter);
                    }
                    catch (DivideByZeroException ex)
                    {
                        MessageBox.Show("Слишком мало данных измерений (минимум 2)", "Оповещение");
                        return; // Прерываем выполнение после ошибки
                    }
                }
            }
        }

        private void DrawMeanLine(Graphics g, Rectangle area, double value, double yMin, double yRange)
        {
            float y = area.Bottom - (float)((value - yMin) / yRange * area.Height);
            g.DrawLine(new Pen(_meanColor, 3) { DashStyle = System.Drawing.Drawing2D.DashStyle.Dash },
                      area.Left, y, area.Right, y);
        }

        private void DrawModeLine(Graphics g, Rectangle area, double value, double yMin, double yRange)
        {
            float y = area.Bottom - (float)((value - yMin) / yRange * area.Height);
            g.DrawLine(new Pen(_modeColor, 3) { DashStyle = System.Drawing.Drawing2D.DashStyle.Dot },
                      area.Left, y, area.Right, y);
        }

        private void DrawMinMaxLines(Graphics g, Rectangle area, double min, double max, double yMin, double yRange)
        {
            float yMinPos = area.Bottom - (float)((min - yMin) / yRange * area.Height);
            float yMaxPos = area.Bottom - (float)((max - yMin) / yRange * area.Height);

            g.DrawLine(new Pen(_minMaxColor, 3), area.Left, yMinPos, area.Right, yMinPos);
            g.DrawLine(new Pen(_minMaxColor, 3), area.Left, yMaxPos, area.Right, yMaxPos);
        }

        private void DrawLegend(Graphics g, Rectangle area, double mode)
        {
            SizeF textSize = g.MeasureString("Аналитическое решение", _textFont);
            float boxWidth = 20;
            float startX = area.Width - textSize.Width - boxWidth - 5;
            float startY = area.Top;
            float itemHeight = textSize.Height;

            DrawLegendItem(g, "Аналитическое решение", _analyticalColor, startX, startY, boxWidth, itemHeight);
            DrawLegendItem(g, "Точки Монте-Карло", _pointsColor, startX, startY + itemHeight, boxWidth, itemHeight);
            DrawLegendItem(g, "Среднее значение", _meanColor, startX, startY + itemHeight * 2, boxWidth, itemHeight);
            DrawLegendItem(g, "Мода", _modeColor, startX, startY + itemHeight * 3, boxWidth, itemHeight);
            DrawLegendItem(g, "Минимум/Максимум", _minMaxColor, startX, startY + itemHeight * 4, boxWidth, itemHeight);
        }

        private void DrawLegendItem(Graphics g, string text, Color color, float x, float y, float boxWidth, float boxHeight)
        {
            SizeF textSize = g.MeasureString("Аналитическое решение", _textFont);
            g.FillRectangle(new SolidBrush(color), x, y + 1, boxWidth, boxHeight - 2);
            g.DrawRectangle(Pens.Black, x, y + 1, boxWidth, boxHeight - 2);
            g.DrawString(text, _textFont, _textBrush, x + boxWidth + 5, y);
        }
    }
}

// ==================================================
// File: D:\Колледж\Учебные практики\практика лето 2025\Monte-Karlo\Monte-Karlo\Utilites\View\MonteCarloView.cs
// ==================================================

using Monte_Karlo.Models;
using Monte_Karlo.Utilites;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Monte_Karlo.Utilites.View
{
    public class MonteCarloView
    {
        public int GridStep
        {
            get => _gridStep;
            set
            {
                _gridStep = value;
                _step = _gridStep * 2;
            }
        }
        private int _gridStep = 40;
        private int _step = 80;

        private static readonly Color _backgroundColor = Color.White;
        private static readonly Pen _gridPen = new(Color.LightGray, 1);
        private static readonly Pen _axisPen = new(Color.Black, 2);

        private static readonly Pen _cutterPen = new(Color.Red, 4);

        private static readonly Pen _circlePen = new(Color.Red, 2);
        private static readonly Pen _squarePen = new(Color.Red, 2);

        private static readonly Pen _excludedPointsBrush = new(Color.Gray, 1);
        private static readonly Pen _includedPointsBrush = new(Color.Yellow, 1);
        private static readonly Pen _cuttedPointsBrush = new(Color.FromArgb(174, 206, 180), 1);

        private static readonly Color _textColor = Color.Black;
        private static readonly Brush _textBrush = new SolidBrush(_textColor);
        private static readonly Font _textFont = new("Arial", 8);



        public void RenderToBuffer(Panel panel, PaintEventArgs e, Circle circle, PointsData pointsData)
        {
            e.Graphics.Clear(_backgroundColor);
            OnPaint(panel, e, circle.radius, circle.circleCenter, circle.direction, circle.C, pointsData);
        }

        private void OnPaint(Panel panel, PaintEventArgs e, float radius, Point circleCenter, Direction direction, float C, PointsData pointsData)
        {
            var g = e.Graphics;
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighSpeed;

            float centerX = panel.Size.Width / 2;
            float centerY = panel.Size.Height / 2;
            var centerScreen = new PointF(centerX, centerY);
            float squareX = centerX - radius * _step;
            float squareY = centerY - radius * _step;
            var squarePoint = new PointF(squareX, squareY);
            float originX = centerX - circleCenter.X * _step;
            float originY = centerY + circleCenter.Y * _step;
            var origin = new PointF(originX, originY);

            DrawPoints(g, centerScreen, _step, pointsData);
            DrawGrid(panel, g, origin);
            DrawAxis(panel, g, origin);
            DrawCoordinateNumbers(panel, g, origin);
            DrawRectangle(g, squarePoint, _step * radius * 2);
            DrawEllipse(g, squarePoint, _step * radius * 2);
            DrawCutter(panel, g, origin, direction, C);
        }

        private void DrawGrid(Panel panel, Graphics g, PointF origin)
        {
            // Вертикальные линии
            for (float x = origin.X; x >= 0; x -= _gridStep)
            {
                g.DrawLine(_gridPen, x, 0, x, panel.Height);
            }
            for (float x = origin.X; x <= panel.Width; x += _gridStep)
            {
                g.DrawLine(_gridPen, x, 0, x, panel.Height);
            }

            // Горизонтальные линии
            for (float y = origin.Y; y >= 0; y -= _gridStep)
            {
                g.DrawLine(_gridPen, 0, y, panel.Width, y);
            }
            for (float y = origin.Y; y <= panel.Height; y += _gridStep)
            {
                g.DrawLine(_gridPen, 0, y, panel.Width, y);
            }
        }

        private void DrawAxis(Panel panel, Graphics g, PointF center)
        {
            g.DrawLine(_axisPen, 0, center.Y, panel.Width, center.Y);
            g.DrawLine(_axisPen, center.X, 0, center.X, panel.Height);
        }
        private void DrawCoordinateNumbers(Panel panel, Graphics g, PointF origin)
        {
            // Числа на оси X
            // влево
            for (float x = origin.X; x >= 0; x -= _step)
            {
                int digit = (int)Math.Round((x - origin.X) / _step);
                if (digit == 0)
                    continue;

                string text = digit.ToString();
                SizeF textSize = g.MeasureString(text, _textFont);
                float textX = x - textSize.Width / 2;
                float textY = origin.Y + 5;

                if (TextInPanel(panel, textSize, textX, textY))
                {
                    g.DrawString(text, _textFont, _textBrush, textX, textY);
                }
            }

            // вправо
            for (float x = origin.X; x <= panel.Width; x += _step)
            {
                int digit = (int)Math.Round((x - origin.X) / _step);
                if (digit == 0)
                    continue;

                string text = digit.ToString();
                SizeF textSize = g.MeasureString(text, _textFont);
                float textX = x - textSize.Width / 2;
                float textY = origin.Y + 5;

                if (TextInPanel(panel, textSize, textX, textY))
                {
                    g.DrawString(text, _textFont, _textBrush, textX, textY);
                }
            }


            // Числа на оси Y
            // вверх
            for (float y = origin.Y; y >= 0; y -= _step)
            {
                int digit = -(int)Math.Round((y - origin.Y) / _step);
                if (digit == 0)
                    continue;

                string text = digit.ToString();
                SizeF textSize = g.MeasureString(text, _textFont);
                float textX = origin.X + 5;
                float textY = y - textSize.Height / 2;

                if (TextInPanel(panel, textSize, textX, textY))
                {
                    g.DrawString(text, _textFont, _textBrush, textX, textY);
                }
            }


            // вниз
            for (float y = origin.Y; y <= panel.Height; y += _step)
            {
                int digit = -(int)Math.Round((y - origin.Y) / _step);
                if (digit == 0)
                    continue;

                string text = digit.ToString();
                SizeF textSize = g.MeasureString(text, _textFont);
                float textX = origin.X + 5;
                float textY = y - textSize.Height / 2;

                if (TextInPanel(panel, textSize, textX, textY))
                {
                    g.DrawString(text, _textFont, _textBrush, textX, textY);
                }
            }

            g.DrawString("0", _textFont, _textBrush, origin.X + 5, origin.Y + 5);
        }

        private bool TextInPanel(Panel panel, SizeF textSize, float textX = 0, float textY = 0)
        {
            bool xIn = textX >= 0 && textX + textSize.Width <= panel.Width;
            bool yIn = textY >= 0 && textY + textSize.Height <= panel.Height;
            return xIn && yIn;
        }

        private void DrawRectangle(Graphics g, PointF square, float squareSize)
        {
            g.DrawRectangle(_squarePen, square.X, square.Y, squareSize, squareSize);
        }
        private void DrawEllipse(Graphics g, PointF square, float squareSize)
        {
            g.DrawEllipse(_circlePen, square.X, square.Y, squareSize, squareSize);
        }

        private void DrawCutter(Panel panel, Graphics g, PointF center, Direction direction, float C)
        {
            if (direction == Direction.horizontal)
                g.DrawLine(_cutterPen, 0, center.Y + _step * -C, panel.Width, center.Y + _step * -C);
            else
                g.DrawLine(_cutterPen, center.X + _step * C, 0, center.X + _step * C, panel.Height);
        }

        private void DrawPoints(Graphics g, PointF center, float gridStep, PointsData pointsData)
        {
/*            foreach (var point in pointsData.ExcludedPoints)
            {
                g.DrawRectangle(_excludedPointsBrush, point.X * gridStep + center.X, center.Y - point.Y * gridStep, 1, 1);
            }
            foreach (var point in pointsData.IncludedPoints)
            {
                g.DrawRectangle(_includedPointsBrush, point.X * gridStep + center.X, center.Y - point.Y * gridStep, 1, 1);
            }*/
            foreach (var point in pointsData.CuttedPoints)
            {
                float screenX = center.X + point.X * gridStep;
                float screenY = center.Y - point.Y * gridStep;
                g.DrawRectangle(_cuttedPointsBrush, screenX, screenY, 1, 1);
            }
        }
    }
}


